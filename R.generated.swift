//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.clr` struct is generated, and contains static references to 1 color palettes.
  /// NOTE: R.clr is deprecated and will be removed in a future R.swift version.
  struct clr {
    /// This `R.clr.primasColor` struct is generated, and contains static references to 16 colors.
    struct primasColor {
      /// <span style='background-color: #00000066; color: #FFFFFF; padding: 1px 3px;'>#00000066</span> C66000000
      static let c66000000 = Rswift.ColorPaletteItemResource(name: "C66000000", red: 0.0, green: 0.0, blue: 0.0, alpha: 0.400000005960464)
      /// <span style='background-color: #000000; color: #FFFFFF; padding: 1px 3px;'>#000000</span> C000000
      static let c000000 = Rswift.ColorPaletteItemResource(name: "C000000", red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0)
      /// <span style='background-color: #009400; color: #FF6BFF; padding: 1px 3px;'>#009400</span> C3C9E25
      static let c3C9E25 = Rswift.ColorPaletteItemResource(name: "C3C9E25", red: 0.0, green: 0.579315721988678, blue: 0.0, alpha: 1.0)
      /// <span style='background-color: #262626; color: #D9D9D9; padding: 1px 3px;'>#262626</span> C333333
      static let c333333 = Rswift.ColorPaletteItemResource(name: "C333333", red: 0.150545343756676, green: 0.150573566555977, blue: 0.150538399815559, alpha: 1.0)
      /// <span style='background-color: #535353; color: #ACACAC; padding: 1px 3px;'>#535353</span> C666666
      static let c666666 = Rswift.ColorPaletteItemResource(name: "C666666", red: 0.325808465480804, green: 0.325869560241699, blue: 0.325793385505676, alpha: 1.0)
      /// <span style='background-color: #878787; color: #787878; padding: 1px 3px;'>#878787</span> C999999
      static let c999999 = Rswift.ColorPaletteItemResource(name: "C999999", red: 0.529585003852844, green: 0.529684245586395, blue: 0.529560506343842, alpha: 1.0)
      /// <span style='background-color: #C1C1C1; color: #3E3E3E; padding: 1px 3px;'>#C1C1C1</span> CCCCCC
      static let cccccC = Rswift.ColorPaletteItemResource(name: "CCCCCC", red: 0.755501627922058, green: 0.755643248558044, blue: 0.755466759204865, alpha: 1.0)
      /// <span style='background-color: #D9DCE0; color: #26231F; padding: 1px 3px;'>#D9DCE0</span> E1E3E6
      static let e1E3E6 = Rswift.ColorPaletteItemResource(name: "E1E3E6", red: 0.852165460586548, green: 0.863860905170441, blue: 0.879430592060089, alpha: 1.0)
      /// <span style='background-color: #E0E0E0; color: #1F1F1F; padding: 1px 3px;'>#E0E0E0</span> E6E6E6
      static let e6E6E6 = Rswift.ColorPaletteItemResource(name: "E6E6E6", red: 0.877956032752991, green: 0.878120601177216, blue: 0.877915441989899, alpha: 1.0)
      /// <span style='background-color: #E8EBEF; color: #171410; padding: 1px 3px;'>#E8EBEF</span> EDEFF2
      static let edeff2 = Rswift.ColorPaletteItemResource(name: "EDEFF2", red: 0.909777283668518, green: 0.921672463417053, blue: 0.937484920024872, alpha: 1.0)
      /// <span style='background-color: #EAEDF6; color: #151209; padding: 1px 3px;'>#EAEDF6</span> EFF1F7
      static let eff1F7 = Rswift.ColorPaletteItemResource(name: "EFF1F7", red: 0.919434607028961, green: 0.930836200714111, blue: 0.963300704956055, alpha: 1.0)
      /// <span style='background-color: #EAEDF6; color: #151209; padding: 1px 3px;'>#EAEDF6</span> F7F7F7
      static let f7F7F7 = Rswift.ColorPaletteItemResource(name: "F7F7F7", red: 0.919434607028961, green: 0.930836200714111, blue: 0.963300704956055, alpha: 1.0)
      /// <span style='background-color: #F2F2F2; color: #0D0D0D; padding: 1px 3px;'>#F2F2F2</span> F2F2F2
      static let f2F2F2 = Rswift.ColorPaletteItemResource(name: "F2F2F2", red: 0.949019610881805, green: 0.949019610881805, blue: 0.949019610881805, alpha: 1.0)
      /// <span style='background-color: #F4F4F4; color: #0B0B0B; padding: 1px 3px;'>#F4F4F4</span> F6F6F6
      static let f6F6F6 = Rswift.ColorPaletteItemResource(name: "F6F6F6", red: 0.955649137496948, green: 0.955620527267456, blue: 0.95563679933548, alpha: 1.0)
      /// <span style='background-color: #FE2D19; color: #01D2E6; padding: 1px 3px;'>#FE2D19</span> ED5634
      static let ed5634 = Rswift.ColorPaletteItemResource(name: "ED5634", red: 0.995791137218475, green: 0.176125690340996, blue: 0.09886234998703, alpha: 1.0)
      /// <span style='background-color: #FFFFFFF5; color: #000000; padding: 1px 3px;'>#FFFFFFF5</span> F5FFFFFF
      static let f5FFFFFF = Rswift.ColorPaletteItemResource(name: "F5FFFFFF", red: 1.0, green: 1.0, blue: 1.0, alpha: 0.959999978542328)
      
      /// <span style='background-color: #00000066; color: #FFFFFF; padding: 1px 3px;'>#00000066</span> C66000000
      /// 
      /// UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 0.400000005960464)
      static func c66000000(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 0.400000005960464)
      }
      
      /// <span style='background-color: #000000; color: #FFFFFF; padding: 1px 3px;'>#000000</span> C000000
      /// 
      /// UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0)
      static func c000000(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #009400; color: #FF6BFF; padding: 1px 3px;'>#009400</span> C3C9E25
      /// 
      /// UIColor(red: 0.0, green: 0.579315721988678, blue: 0.0, alpha: 1.0)
      static func c3C9E25(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.0, green: 0.579315721988678, blue: 0.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #262626; color: #D9D9D9; padding: 1px 3px;'>#262626</span> C333333
      /// 
      /// UIColor(red: 0.150545343756676, green: 0.150573566555977, blue: 0.150538399815559, alpha: 1.0)
      static func c333333(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.150545343756676, green: 0.150573566555977, blue: 0.150538399815559, alpha: 1.0)
      }
      
      /// <span style='background-color: #535353; color: #ACACAC; padding: 1px 3px;'>#535353</span> C666666
      /// 
      /// UIColor(red: 0.325808465480804, green: 0.325869560241699, blue: 0.325793385505676, alpha: 1.0)
      static func c666666(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.325808465480804, green: 0.325869560241699, blue: 0.325793385505676, alpha: 1.0)
      }
      
      /// <span style='background-color: #878787; color: #787878; padding: 1px 3px;'>#878787</span> C999999
      /// 
      /// UIColor(red: 0.529585003852844, green: 0.529684245586395, blue: 0.529560506343842, alpha: 1.0)
      static func c999999(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.529585003852844, green: 0.529684245586395, blue: 0.529560506343842, alpha: 1.0)
      }
      
      /// <span style='background-color: #C1C1C1; color: #3E3E3E; padding: 1px 3px;'>#C1C1C1</span> CCCCCC
      /// 
      /// UIColor(red: 0.755501627922058, green: 0.755643248558044, blue: 0.755466759204865, alpha: 1.0)
      static func cccccC(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.755501627922058, green: 0.755643248558044, blue: 0.755466759204865, alpha: 1.0)
      }
      
      /// <span style='background-color: #D9DCE0; color: #26231F; padding: 1px 3px;'>#D9DCE0</span> E1E3E6
      /// 
      /// UIColor(red: 0.852165460586548, green: 0.863860905170441, blue: 0.879430592060089, alpha: 1.0)
      static func e1E3E6(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.852165460586548, green: 0.863860905170441, blue: 0.879430592060089, alpha: 1.0)
      }
      
      /// <span style='background-color: #E0E0E0; color: #1F1F1F; padding: 1px 3px;'>#E0E0E0</span> E6E6E6
      /// 
      /// UIColor(red: 0.877956032752991, green: 0.878120601177216, blue: 0.877915441989899, alpha: 1.0)
      static func e6E6E6(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.877956032752991, green: 0.878120601177216, blue: 0.877915441989899, alpha: 1.0)
      }
      
      /// <span style='background-color: #E8EBEF; color: #171410; padding: 1px 3px;'>#E8EBEF</span> EDEFF2
      /// 
      /// UIColor(red: 0.909777283668518, green: 0.921672463417053, blue: 0.937484920024872, alpha: 1.0)
      static func edeff2(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.909777283668518, green: 0.921672463417053, blue: 0.937484920024872, alpha: 1.0)
      }
      
      /// <span style='background-color: #EAEDF6; color: #151209; padding: 1px 3px;'>#EAEDF6</span> EFF1F7
      /// 
      /// UIColor(red: 0.919434607028961, green: 0.930836200714111, blue: 0.963300704956055, alpha: 1.0)
      static func eff1F7(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.919434607028961, green: 0.930836200714111, blue: 0.963300704956055, alpha: 1.0)
      }
      
      /// <span style='background-color: #EAEDF6; color: #151209; padding: 1px 3px;'>#EAEDF6</span> F7F7F7
      /// 
      /// UIColor(red: 0.919434607028961, green: 0.930836200714111, blue: 0.963300704956055, alpha: 1.0)
      static func f7F7F7(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.919434607028961, green: 0.930836200714111, blue: 0.963300704956055, alpha: 1.0)
      }
      
      /// <span style='background-color: #F2F2F2; color: #0D0D0D; padding: 1px 3px;'>#F2F2F2</span> F2F2F2
      /// 
      /// UIColor(red: 0.949019610881805, green: 0.949019610881805, blue: 0.949019610881805, alpha: 1.0)
      static func f2F2F2(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.949019610881805, green: 0.949019610881805, blue: 0.949019610881805, alpha: 1.0)
      }
      
      /// <span style='background-color: #F4F4F4; color: #0B0B0B; padding: 1px 3px;'>#F4F4F4</span> F6F6F6
      /// 
      /// UIColor(red: 0.955649137496948, green: 0.955620527267456, blue: 0.95563679933548, alpha: 1.0)
      static func f6F6F6(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.955649137496948, green: 0.955620527267456, blue: 0.95563679933548, alpha: 1.0)
      }
      
      /// <span style='background-color: #FE2D19; color: #01D2E6; padding: 1px 3px;'>#FE2D19</span> ED5634
      /// 
      /// UIColor(red: 0.995791137218475, green: 0.176125690340996, blue: 0.09886234998703, alpha: 1.0)
      static func ed5634(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.995791137218475, green: 0.176125690340996, blue: 0.09886234998703, alpha: 1.0)
      }
      
      /// <span style='background-color: #FFFFFFF5; color: #000000; padding: 1px 3px;'>#FFFFFFF5</span> F5FFFFFF
      /// 
      /// UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 0.959999978542328)
      static func f5FFFFFF(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 0.959999978542328)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `LanguageCode.plist`.
    static let languageCodePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "LanguageCode", pathExtension: "plist")
    /// Resource file `LanguageName.plist`.
    static let languageNamePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "LanguageName", pathExtension: "plist")
    /// Resource file `PrimasColor.clr`.
    static let primasColorClr = Rswift.FileResource(bundle: R.hostingBundle, name: "PrimasColor", pathExtension: "clr")
    /// Resource file `帮助中心.pdf`.
    static let 帮助中心Pdf = Rswift.FileResource(bundle: R.hostingBundle, name: "帮助中心", pathExtension: "pdf")
    
    /// `bundle.url(forResource: "LanguageCode", withExtension: "plist")`
    static func languageCodePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.languageCodePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "LanguageName", withExtension: "plist")`
    static func languageNamePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.languageNamePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "PrimasColor", withExtension: "clr")`
    static func primasColorClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.primasColorClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "帮助中心", withExtension: "pdf")`
    static func 帮助中心Pdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.帮助中心Pdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 133 images.
  struct image {
    /// Image `arrow_left_on`.
    static let arrow_left_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_left_on")
    /// Image `arrow_left_w_on`.
    static let arrow_left_w_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_left_w_on")
    /// Image `arrow_left_w`.
    static let arrow_left_w = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_left_w")
    /// Image `arrow_left`.
    static let arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_left")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bangzhu`.
    static let bangzhu = Rswift.ImageResource(bundle: R.hostingBundle, name: "bangzhu")
    /// Image `beifen`.
    static let beifen = Rswift.ImageResource(bundle: R.hostingBundle, name: "beifen")
    /// Image `chenggong_bg`.
    static let chenggong_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "chenggong_bg")
    /// Image `choosen`.
    static let choosen = Rswift.ImageResource(bundle: R.hostingBundle, name: "choosen")
    /// Image `chuangjianchengg`.
    static let chuangjianchengg = Rswift.ImageResource(bundle: R.hostingBundle, name: "chuangjianchengg")
    /// Image `dadianzan`.
    static let dadianzan = Rswift.ImageResource(bundle: R.hostingBundle, name: "dadianzan")
    /// Image `dahuifu`.
    static let dahuifu = Rswift.ImageResource(bundle: R.hostingBundle, name: "dahuifu")
    /// Image `dazhuanfa`.
    static let dazhuanfa = Rswift.ImageResource(bundle: R.hostingBundle, name: "dazhuanfa")
    /// Image `delete_icon`.
    static let delete_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_icon")
    /// Image `denglubeijing`.
    static let denglubeijing = Rswift.ImageResource(bundle: R.hostingBundle, name: "denglubeijing")
    /// Image `dengluguanbi`.
    static let dengluguanbi = Rswift.ImageResource(bundle: R.hostingBundle, name: "dengluguanbi")
    /// Image `dianzan_1`.
    static let dianzan_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dianzan_1")
    /// Image `dianzan_dian`.
    static let dianzan_dian = Rswift.ImageResource(bundle: R.hostingBundle, name: "dianzan_dian")
    /// Image `dianzan`.
    static let dianzan = Rswift.ImageResource(bundle: R.hostingBundle, name: "dianzan")
    /// Image `empty_icon`.
    static let empty_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_icon")
    /// Image `enter`.
    static let enter = Rswift.ImageResource(bundle: R.hostingBundle, name: "enter")
    /// Image `fabu`.
    static let fabu = Rswift.ImageResource(bundle: R.hostingBundle, name: "fabu")
    /// Image `gou`.
    static let gou = Rswift.ImageResource(bundle: R.hostingBundle, name: "gou")
    /// Image `group_bg`.
    static let group_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "group_bg")
    /// Image `guanbi_2`.
    static let guanbi_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guanbi_2")
    /// Image `guanbi_3`.
    static let guanbi_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guanbi_3")
    /// Image `guanbi_red`.
    static let guanbi_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "guanbi_red")
    /// Image `guanbi`.
    static let guanbi = Rswift.ImageResource(bundle: R.hostingBundle, name: "guanbi")
    /// Image `guanyuwomen`.
    static let guanyuwomen = Rswift.ImageResource(bundle: R.hostingBundle, name: "guanyuwomen")
    /// Image `huanyipi`.
    static let huanyipi = Rswift.ImageResource(bundle: R.hostingBundle, name: "huanyipi")
    /// Image `huifu`.
    static let huifu = Rswift.ImageResource(bundle: R.hostingBundle, name: "huifu")
    /// Image `item_more`.
    static let item_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "item_more")
    /// Image `jianpan_xia`.
    static let jianpan_xia = Rswift.ImageResource(bundle: R.hostingBundle, name: "jianpan_xia")
    /// Image `jianpan`.
    static let jianpan = Rswift.ImageResource(bundle: R.hostingBundle, name: "jianpan")
    /// Image `jiazhi_1`.
    static let jiazhi_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "jiazhi_1")
    /// Image `jiazhi`.
    static let jiazhi = Rswift.ImageResource(bundle: R.hostingBundle, name: "jiazhi")
    /// Image `jingtan`.
    static let jingtan = Rswift.ImageResource(bundle: R.hostingBundle, name: "jingtan")
    /// Image `laba`.
    static let laba = Rswift.ImageResource(bundle: R.hostingBundle, name: "laba")
    /// Image `logoX`.
    static let logoX = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoX")
    /// Image `logo_big`.
    static let logo_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_big")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `member_more`.
    static let member_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "member_more")
    /// Image `middle`.
    static let middle = Rswift.ImageResource(bundle: R.hostingBundle, name: "middle")
    /// Image `mine_bg`.
    static let mine_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_bg")
    /// Image `mine_setting`.
    static let mine_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_setting")
    /// Image `ok`.
    static let ok = Rswift.ImageResource(bundle: R.hostingBundle, name: "ok")
    /// Image `pic_10`.
    static let pic_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_10")
    /// Image `pic_11`.
    static let pic_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_11")
    /// Image `pic_12`.
    static let pic_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_12")
    /// Image `pic_13`.
    static let pic_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_13")
    /// Image `pic_14`.
    static let pic_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_14")
    /// Image `pic_15`.
    static let pic_15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_15")
    /// Image `pic_16`.
    static let pic_16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_16")
    /// Image `pic_17`.
    static let pic_17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_17")
    /// Image `pic_18`.
    static let pic_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_18")
    /// Image `pic_19`.
    static let pic_19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_19")
    /// Image `pic_1`.
    static let pic_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_1")
    /// Image `pic_20`.
    static let pic_20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_20")
    /// Image `pic_2`.
    static let pic_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_2")
    /// Image `pic_3`.
    static let pic_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_3")
    /// Image `pic_4`.
    static let pic_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_4")
    /// Image `pic_5`.
    static let pic_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_5")
    /// Image `pic_6`.
    static let pic_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_6")
    /// Image `pic_7`.
    static let pic_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_7")
    /// Image `pic_8`.
    static let pic_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_8")
    /// Image `pic_9`.
    static let pic_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_9")
    /// Image `pinglun_1`.
    static let pinglun_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinglun_1")
    /// Image `pinglun`.
    static let pinglun = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinglun")
    /// Image `portrait`.
    static let portrait = Rswift.ImageResource(bundle: R.hostingBundle, name: "portrait")
    /// Image `qidongye`.
    static let qidongye = Rswift.ImageResource(bundle: R.hostingBundle, name: "qidongye")
    /// Image `quchuangjian`.
    static let quchuangjian = Rswift.ImageResource(bundle: R.hostingBundle, name: "quchuangjian")
    /// Image `quexun_1`.
    static let quexun_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "quexun_1")
    /// Image `qufabu`.
    static let qufabu = Rswift.ImageResource(bundle: R.hostingBundle, name: "qufabu")
    /// Image `sanjiao`.
    static let sanjiao = Rswift.ImageResource(bundle: R.hostingBundle, name: "sanjiao")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `shequn_1`.
    static let shequn_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "shequn_1")
    /// Image `shequn`.
    static let shequn = Rswift.ImageResource(bundle: R.hostingBundle, name: "shequn")
    /// Image `shezhi`.
    static let shezhi = Rswift.ImageResource(bundle: R.hostingBundle, name: "shezhi")
    /// Image `shouye_1`.
    static let shouye_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "shouye_1")
    /// Image `shouye`.
    static let shouye = Rswift.ImageResource(bundle: R.hostingBundle, name: "shouye")
    /// Image `shouyi`.
    static let shouyi = Rswift.ImageResource(bundle: R.hostingBundle, name: "shouyi")
    /// Image `strong`.
    static let strong = Rswift.ImageResource(bundle: R.hostingBundle, name: "strong")
    /// Image `suoding`.
    static let suoding = Rswift.ImageResource(bundle: R.hostingBundle, name: "suoding")
    /// Image `touxiang_10`.
    static let touxiang_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_10")
    /// Image `touxiang_11`.
    static let touxiang_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_11")
    /// Image `touxiang_12`.
    static let touxiang_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_12")
    /// Image `touxiang_13`.
    static let touxiang_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_13")
    /// Image `touxiang_14`.
    static let touxiang_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_14")
    /// Image `touxiang_15`.
    static let touxiang_15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_15")
    /// Image `touxiang_16`.
    static let touxiang_16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_16")
    /// Image `touxiang_17`.
    static let touxiang_17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_17")
    /// Image `touxiang_18`.
    static let touxiang_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_18")
    /// Image `touxiang_19`.
    static let touxiang_19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_19")
    /// Image `touxiang_1`.
    static let touxiang_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_1")
    /// Image `touxiang_20`.
    static let touxiang_20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_20")
    /// Image `touxiang_21`.
    static let touxiang_21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_21")
    /// Image `touxiang_22`.
    static let touxiang_22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_22")
    /// Image `touxiang_2`.
    static let touxiang_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_2")
    /// Image `touxiang_3`.
    static let touxiang_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_3")
    /// Image `touxiang_4`.
    static let touxiang_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_4")
    /// Image `touxiang_5`.
    static let touxiang_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_5")
    /// Image `touxiang_6`.
    static let touxiang_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_6")
    /// Image `touxiang_7`.
    static let touxiang_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_7")
    /// Image `touxiang_8`.
    static let touxiang_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_8")
    /// Image `touxiang_9`.
    static let touxiang_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "touxiang_9")
    /// Image `tuichu`.
    static let tuichu = Rswift.ImageResource(bundle: R.hostingBundle, name: "tuichu")
    /// Image `update_icon`.
    static let update_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "update_icon")
    /// Image `userLogo`.
    static let userLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "userLogo")
    /// Image `weak`.
    static let weak = Rswift.ImageResource(bundle: R.hostingBundle, name: "weak")
    /// Image `weixuanze`.
    static let weixuanze = Rswift.ImageResource(bundle: R.hostingBundle, name: "weixuanze")
    /// Image `wode_1`.
    static let wode_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wode_1")
    /// Image `wode`.
    static let wode = Rswift.ImageResource(bundle: R.hostingBundle, name: "wode")
    /// Image `xiangce`.
    static let xiangce = Rswift.ImageResource(bundle: R.hostingBundle, name: "xiangce")
    /// Image `xiangji2`.
    static let xiangji2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "xiangji2")
    /// Image `xiangji`.
    static let xiangji = Rswift.ImageResource(bundle: R.hostingBundle, name: "xiangji")
    /// Image `xiaohao`.
    static let xiaohao = Rswift.ImageResource(bundle: R.hostingBundle, name: "xiaohao")
    /// Image `xieyi3`.
    static let xieyi3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "xieyi3")
    /// Image `xieyi_1`.
    static let xieyi_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "xieyi_1")
    /// Image `xieyi_2`.
    static let xieyi_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "xieyi_2")
    /// Image `xuanze`.
    static let xuanze = Rswift.ImageResource(bundle: R.hostingBundle, name: "xuanze")
    /// Image `zanwuguanzhu`.
    static let zanwuguanzhu = Rswift.ImageResource(bundle: R.hostingBundle, name: "zanwuguanzhu")
    /// Image `zanwupinglun-1`.
    static let zanwupinglun1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "zanwupinglun-1")
    /// Image `zanwupinglun`.
    static let zanwupinglun = Rswift.ImageResource(bundle: R.hostingBundle, name: "zanwupinglun")
    /// Image `zanwushuju`.
    static let zanwushuju = Rswift.ImageResource(bundle: R.hostingBundle, name: "zanwushuju")
    /// Image `zhuanfa_1`.
    static let zhuanfa_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhuanfa_1")
    /// Image `zhuanfa`.
    static let zhuanfa = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhuanfa")
    /// Image `zhuanzai`.
    static let zhuanzai = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhuanzai")
    /// Image `回复`.
    static let 回复 = Rswift.ImageResource(bundle: R.hostingBundle, name: "回复")
    /// Image `点赞`.
    static let 点赞 = Rswift.ImageResource(bundle: R.hostingBundle, name: "点赞")
    /// Image `组33`.
    static let 组33 = Rswift.ImageResource(bundle: R.hostingBundle, name: "组33")
    /// Image `组36`.
    static let 组36 = Rswift.ImageResource(bundle: R.hostingBundle, name: "组36")
    /// Image `转发`.
    static let 转发 = Rswift.ImageResource(bundle: R.hostingBundle, name: "转发")
    /// Image `转载`.
    static let 转载 = Rswift.ImageResource(bundle: R.hostingBundle, name: "转载")
    
    /// `UIImage(named: "arrow_left", bundle: ..., traitCollection: ...)`
    static func arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_left_on", bundle: ..., traitCollection: ...)`
    static func arrow_left_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_left_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_left_w", bundle: ..., traitCollection: ...)`
    static func arrow_left_w(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_left_w, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_left_w_on", bundle: ..., traitCollection: ...)`
    static func arrow_left_w_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_left_w_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bangzhu", bundle: ..., traitCollection: ...)`
    static func bangzhu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bangzhu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "beifen", bundle: ..., traitCollection: ...)`
    static func beifen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.beifen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chenggong_bg", bundle: ..., traitCollection: ...)`
    static func chenggong_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chenggong_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "choosen", bundle: ..., traitCollection: ...)`
    static func choosen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.choosen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chuangjianchengg", bundle: ..., traitCollection: ...)`
    static func chuangjianchengg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chuangjianchengg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dadianzan", bundle: ..., traitCollection: ...)`
    static func dadianzan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dadianzan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dahuifu", bundle: ..., traitCollection: ...)`
    static func dahuifu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dahuifu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dazhuanfa", bundle: ..., traitCollection: ...)`
    static func dazhuanfa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dazhuanfa, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delete_icon", bundle: ..., traitCollection: ...)`
    static func delete_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "denglubeijing", bundle: ..., traitCollection: ...)`
    static func denglubeijing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.denglubeijing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dengluguanbi", bundle: ..., traitCollection: ...)`
    static func dengluguanbi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dengluguanbi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dianzan", bundle: ..., traitCollection: ...)`
    static func dianzan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dianzan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dianzan_1", bundle: ..., traitCollection: ...)`
    static func dianzan_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dianzan_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dianzan_dian", bundle: ..., traitCollection: ...)`
    static func dianzan_dian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dianzan_dian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "empty_icon", bundle: ..., traitCollection: ...)`
    static func empty_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "enter", bundle: ..., traitCollection: ...)`
    static func enter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.enter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fabu", bundle: ..., traitCollection: ...)`
    static func fabu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fabu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gou", bundle: ..., traitCollection: ...)`
    static func gou(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gou, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "group_bg", bundle: ..., traitCollection: ...)`
    static func group_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guanbi", bundle: ..., traitCollection: ...)`
    static func guanbi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guanbi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guanbi_2", bundle: ..., traitCollection: ...)`
    static func guanbi_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guanbi_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guanbi_3", bundle: ..., traitCollection: ...)`
    static func guanbi_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guanbi_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guanbi_red", bundle: ..., traitCollection: ...)`
    static func guanbi_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guanbi_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guanyuwomen", bundle: ..., traitCollection: ...)`
    static func guanyuwomen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guanyuwomen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "huanyipi", bundle: ..., traitCollection: ...)`
    static func huanyipi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.huanyipi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "huifu", bundle: ..., traitCollection: ...)`
    static func huifu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.huifu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "item_more", bundle: ..., traitCollection: ...)`
    static func item_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.item_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "jianpan", bundle: ..., traitCollection: ...)`
    static func jianpan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jianpan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "jianpan_xia", bundle: ..., traitCollection: ...)`
    static func jianpan_xia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jianpan_xia, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "jiazhi", bundle: ..., traitCollection: ...)`
    static func jiazhi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jiazhi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "jiazhi_1", bundle: ..., traitCollection: ...)`
    static func jiazhi_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jiazhi_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "jingtan", bundle: ..., traitCollection: ...)`
    static func jingtan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jingtan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "laba", bundle: ..., traitCollection: ...)`
    static func laba(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.laba, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logoX", bundle: ..., traitCollection: ...)`
    static func logoX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoX, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_big", bundle: ..., traitCollection: ...)`
    static func logo_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "member_more", bundle: ..., traitCollection: ...)`
    static func member_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "middle", bundle: ..., traitCollection: ...)`
    static func middle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.middle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_bg", bundle: ..., traitCollection: ...)`
    static func mine_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_setting", bundle: ..., traitCollection: ...)`
    static func mine_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ok", bundle: ..., traitCollection: ...)`
    static func ok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ok, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_1", bundle: ..., traitCollection: ...)`
    static func pic_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_10", bundle: ..., traitCollection: ...)`
    static func pic_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_11", bundle: ..., traitCollection: ...)`
    static func pic_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_12", bundle: ..., traitCollection: ...)`
    static func pic_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_13", bundle: ..., traitCollection: ...)`
    static func pic_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_13, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_14", bundle: ..., traitCollection: ...)`
    static func pic_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_14, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_15", bundle: ..., traitCollection: ...)`
    static func pic_15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_15, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_16", bundle: ..., traitCollection: ...)`
    static func pic_16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_17", bundle: ..., traitCollection: ...)`
    static func pic_17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_17, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_18", bundle: ..., traitCollection: ...)`
    static func pic_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_18, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_19", bundle: ..., traitCollection: ...)`
    static func pic_19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_19, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_2", bundle: ..., traitCollection: ...)`
    static func pic_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_20", bundle: ..., traitCollection: ...)`
    static func pic_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_3", bundle: ..., traitCollection: ...)`
    static func pic_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_4", bundle: ..., traitCollection: ...)`
    static func pic_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_5", bundle: ..., traitCollection: ...)`
    static func pic_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_6", bundle: ..., traitCollection: ...)`
    static func pic_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_7", bundle: ..., traitCollection: ...)`
    static func pic_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_8", bundle: ..., traitCollection: ...)`
    static func pic_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_9", bundle: ..., traitCollection: ...)`
    static func pic_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pinglun", bundle: ..., traitCollection: ...)`
    static func pinglun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinglun, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pinglun_1", bundle: ..., traitCollection: ...)`
    static func pinglun_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinglun_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "portrait", bundle: ..., traitCollection: ...)`
    static func portrait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portrait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qidongye", bundle: ..., traitCollection: ...)`
    static func qidongye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qidongye, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "quchuangjian", bundle: ..., traitCollection: ...)`
    static func quchuangjian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quchuangjian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "quexun_1", bundle: ..., traitCollection: ...)`
    static func quexun_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quexun_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qufabu", bundle: ..., traitCollection: ...)`
    static func qufabu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qufabu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sanjiao", bundle: ..., traitCollection: ...)`
    static func sanjiao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sanjiao, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shequn", bundle: ..., traitCollection: ...)`
    static func shequn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shequn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shequn_1", bundle: ..., traitCollection: ...)`
    static func shequn_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shequn_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shezhi", bundle: ..., traitCollection: ...)`
    static func shezhi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shezhi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shouye", bundle: ..., traitCollection: ...)`
    static func shouye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shouye, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shouye_1", bundle: ..., traitCollection: ...)`
    static func shouye_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shouye_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shouyi", bundle: ..., traitCollection: ...)`
    static func shouyi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shouyi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "strong", bundle: ..., traitCollection: ...)`
    static func strong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.strong, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "suoding", bundle: ..., traitCollection: ...)`
    static func suoding(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.suoding, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_1", bundle: ..., traitCollection: ...)`
    static func touxiang_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_10", bundle: ..., traitCollection: ...)`
    static func touxiang_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_11", bundle: ..., traitCollection: ...)`
    static func touxiang_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_12", bundle: ..., traitCollection: ...)`
    static func touxiang_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_13", bundle: ..., traitCollection: ...)`
    static func touxiang_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_13, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_14", bundle: ..., traitCollection: ...)`
    static func touxiang_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_14, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_15", bundle: ..., traitCollection: ...)`
    static func touxiang_15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_15, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_16", bundle: ..., traitCollection: ...)`
    static func touxiang_16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_17", bundle: ..., traitCollection: ...)`
    static func touxiang_17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_17, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_18", bundle: ..., traitCollection: ...)`
    static func touxiang_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_18, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_19", bundle: ..., traitCollection: ...)`
    static func touxiang_19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_19, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_2", bundle: ..., traitCollection: ...)`
    static func touxiang_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_20", bundle: ..., traitCollection: ...)`
    static func touxiang_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_21", bundle: ..., traitCollection: ...)`
    static func touxiang_21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_21, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_22", bundle: ..., traitCollection: ...)`
    static func touxiang_22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_22, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_3", bundle: ..., traitCollection: ...)`
    static func touxiang_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_4", bundle: ..., traitCollection: ...)`
    static func touxiang_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_5", bundle: ..., traitCollection: ...)`
    static func touxiang_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_6", bundle: ..., traitCollection: ...)`
    static func touxiang_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_7", bundle: ..., traitCollection: ...)`
    static func touxiang_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_8", bundle: ..., traitCollection: ...)`
    static func touxiang_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touxiang_9", bundle: ..., traitCollection: ...)`
    static func touxiang_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touxiang_9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tuichu", bundle: ..., traitCollection: ...)`
    static func tuichu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tuichu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "update_icon", bundle: ..., traitCollection: ...)`
    static func update_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.update_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userLogo", bundle: ..., traitCollection: ...)`
    static func userLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "weak", bundle: ..., traitCollection: ...)`
    static func weak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weak, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "weixuanze", bundle: ..., traitCollection: ...)`
    static func weixuanze(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weixuanze, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wode", bundle: ..., traitCollection: ...)`
    static func wode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wode_1", bundle: ..., traitCollection: ...)`
    static func wode_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wode_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xiangce", bundle: ..., traitCollection: ...)`
    static func xiangce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xiangce, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xiangji", bundle: ..., traitCollection: ...)`
    static func xiangji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xiangji, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xiangji2", bundle: ..., traitCollection: ...)`
    static func xiangji2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xiangji2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xiaohao", bundle: ..., traitCollection: ...)`
    static func xiaohao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xiaohao, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xieyi3", bundle: ..., traitCollection: ...)`
    static func xieyi3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xieyi3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xieyi_1", bundle: ..., traitCollection: ...)`
    static func xieyi_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xieyi_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xieyi_2", bundle: ..., traitCollection: ...)`
    static func xieyi_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xieyi_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xuanze", bundle: ..., traitCollection: ...)`
    static func xuanze(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xuanze, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zanwuguanzhu", bundle: ..., traitCollection: ...)`
    static func zanwuguanzhu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zanwuguanzhu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zanwupinglun", bundle: ..., traitCollection: ...)`
    static func zanwupinglun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zanwupinglun, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zanwupinglun-1", bundle: ..., traitCollection: ...)`
    static func zanwupinglun1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zanwupinglun1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zanwushuju", bundle: ..., traitCollection: ...)`
    static func zanwushuju(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zanwushuju, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zhuanfa", bundle: ..., traitCollection: ...)`
    static func zhuanfa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhuanfa, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zhuanfa_1", bundle: ..., traitCollection: ...)`
    static func zhuanfa_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhuanfa_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zhuanzai", bundle: ..., traitCollection: ...)`
    static func zhuanzai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhuanzai, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "回复", bundle: ..., traitCollection: ...)`
    static func 回复(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.回复, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "点赞", bundle: ..., traitCollection: ...)`
    static func 点赞(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.点赞, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "组33", bundle: ..., traitCollection: ...)`
    static func 组33(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.组33, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "组36", bundle: ..., traitCollection: ...)`
    static func 组36(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.组36, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "转发", bundle: ..., traitCollection: ...)`
    static func 转发(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.转发, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "转载", bundle: ..., traitCollection: ...)`
    static func 转载(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.转载, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `CommentCell`.
    static let commentCell = _R.nib._CommentCell()
    /// Nib `CommentToolBar`.
    static let commentToolBar = _R.nib._CommentToolBar()
    /// Nib `CycleCell`.
    static let cycleCell = _R.nib._CycleCell()
    /// Nib `EditToolBar`.
    static let editToolBar = _R.nib._EditToolBar()
    /// Nib `ImageTextCell`.
    static let imageTextCell = _R.nib._ImageTextCell()
    /// Nib `MineCycleCell`.
    static let mineCycleCell = _R.nib._MineCycleCell()
    /// Nib `NocomentPage`.
    static let nocomentPage = _R.nib._NocomentPage()
    /// Nib `PostCircleCell`.
    static let postCircleCell = _R.nib._PostCircleCell()
    /// Nib `TagCollectionCell`.
    static let tagCollectionCell = _R.nib._TagCollectionCell()
    /// Nib `WorthCell`.
    static let worthCell = _R.nib._WorthCell()
    
    /// `UINib(name: "CommentCell", in: bundle)`
    static func commentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentCell)
    }
    
    /// `UINib(name: "CommentToolBar", in: bundle)`
    static func commentToolBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentToolBar)
    }
    
    /// `UINib(name: "CycleCell", in: bundle)`
    static func cycleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cycleCell)
    }
    
    /// `UINib(name: "EditToolBar", in: bundle)`
    static func editToolBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editToolBar)
    }
    
    /// `UINib(name: "ImageTextCell", in: bundle)`
    static func imageTextCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageTextCell)
    }
    
    /// `UINib(name: "MineCycleCell", in: bundle)`
    static func mineCycleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineCycleCell)
    }
    
    /// `UINib(name: "NocomentPage", in: bundle)`
    static func nocomentPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nocomentPage)
    }
    
    /// `UINib(name: "PostCircleCell", in: bundle)`
    static func postCircleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postCircleCell)
    }
    
    /// `UINib(name: "TagCollectionCell", in: bundle)`
    static func tagCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagCollectionCell)
    }
    
    /// `UINib(name: "WorthCell", in: bundle)`
    static func worthCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.worthCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 17 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ArticleContent`.
    static let articleContent: Rswift.ReuseIdentifier<ArticleContent> = Rswift.ReuseIdentifier(identifier: "ArticleContent")
    /// Reuse identifier `ArticleTitleCell`.
    static let articleTitleCell: Rswift.ReuseIdentifier<ArticleTitleCell> = Rswift.ReuseIdentifier(identifier: "ArticleTitleCell")
    /// Reuse identifier `AuthorInfoCell`.
    static let authorInfoCell: Rswift.ReuseIdentifier<AuthorInfoCell> = Rswift.ReuseIdentifier(identifier: "AuthorInfoCell")
    /// Reuse identifier `BackupItemCell`.
    static let backupItemCell: Rswift.ReuseIdentifier<BackupItemCell> = Rswift.ReuseIdentifier(identifier: "BackupItemCell")
    /// Reuse identifier `CommentCell`.
    static let commentCell: Rswift.ReuseIdentifier<CommentCell> = Rswift.ReuseIdentifier(identifier: "CommentCell")
    /// Reuse identifier `CommentFooter`.
    static let commentFooter: Rswift.ReuseIdentifier<CommentFooter> = Rswift.ReuseIdentifier(identifier: "CommentFooter")
    /// Reuse identifier `CommentHeader`.
    static let commentHeader: Rswift.ReuseIdentifier<CommentHeader> = Rswift.ReuseIdentifier(identifier: "CommentHeader")
    /// Reuse identifier `CycleViewCell`.
    static let cycleViewCell: Rswift.ReuseIdentifier<CycleCell> = Rswift.ReuseIdentifier(identifier: "CycleViewCell")
    /// Reuse identifier `DetailPageCircle`.
    static let detailPageCircle: Rswift.ReuseIdentifier<DetailPageCircle> = Rswift.ReuseIdentifier(identifier: "DetailPageCircle")
    /// Reuse identifier `ImageTextCell`.
    static let imageTextCell: Rswift.ReuseIdentifier<ImageTextCell> = Rswift.ReuseIdentifier(identifier: "ImageTextCell")
    /// Reuse identifier `MineCycleCell`.
    static let mineCycleCell: Rswift.ReuseIdentifier<MineCycleCell> = Rswift.ReuseIdentifier(identifier: "MineCycleCell")
    /// Reuse identifier `PostCircleCell`.
    static let postCircleCell: Rswift.ReuseIdentifier<PostCircleCell> = Rswift.ReuseIdentifier(identifier: "PostCircleCell")
    /// Reuse identifier `TagCollectionCell`.
    static let tagCollectionCell: Rswift.ReuseIdentifier<TagCollectionCell> = Rswift.ReuseIdentifier(identifier: "TagCollectionCell")
    /// Reuse identifier `TagTableViewCell`.
    static let tagTableViewCell: Rswift.ReuseIdentifier<TagTableViewCell> = Rswift.ReuseIdentifier(identifier: "TagTableViewCell")
    /// Reuse identifier `WorthCell`.
    static let worthCell: Rswift.ReuseIdentifier<WorthCell> = Rswift.ReuseIdentifier(identifier: "WorthCell")
    /// Reuse identifier `cells`.
    static let cells: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "cells")
    /// Reuse identifier `tagCells`.
    static let tagCells: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "tagCells")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `CyclePage`, and contains static references to 1 segues.
    struct cyclePage {
      /// Segue identifier `goCircle`.
      static let goCircle: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CyclePage, CycleIndexPage> = Rswift.StoryboardSegueIdentifier(identifier: "goCircle")
      
      /// Optionally returns a typed version of segue `goCircle`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goCircle(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CyclePage, CycleIndexPage>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.cyclePage.goCircle, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HomePage`, and contains static references to 1 segues.
    struct homePage {
      /// Segue identifier `goArticleDetail`.
      static let goArticleDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomePage, ArticleDetail> = Rswift.StoryboardSegueIdentifier(identifier: "goArticleDetail")
      
      /// Optionally returns a typed version of segue `goArticleDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goArticleDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomePage, ArticleDetail>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homePage.goArticleDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PostStepOne`, and contains static references to 1 segues.
    struct primasPostStepOne {
      /// Segue identifier `goPostStepTwo`.
      static let goPostStepTwo: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, Primas.PostStepOne, PostStepTwo> = Rswift.StoryboardSegueIdentifier(identifier: "goPostStepTwo")
      
      /// Optionally returns a typed version of segue `goPostStepTwo`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goPostStepTwo(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, Primas.PostStepOne, PostStepTwo>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.primasPostStepOne.goPostStepTwo, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PostStepTwo`, and contains static references to 1 segues.
    struct postStepTwo {
      /// Segue identifier `goAgreementPage`.
      static let goAgreementPage: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PostStepTwo, AgreementPage> = Rswift.StoryboardSegueIdentifier(identifier: "goAgreementPage")
      
      /// Optionally returns a typed version of segue `goAgreementPage`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goAgreementPage(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PostStepTwo, AgreementPage>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.postStepTwo.goAgreementPage, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `BuiltWallet`.
    static let builtWallet = _R.storyboard.builtWallet()
    /// Storyboard `CyclePage`.
    static let cyclePage = _R.storyboard.cyclePage()
    /// Storyboard `HomePage`.
    static let homePage = _R.storyboard.homePage()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MinePage`.
    static let minePage = _R.storyboard.minePage()
    /// Storyboard `NoticeView`.
    static let noticeView = _R.storyboard.noticeView()
    /// Storyboard `PostPage`.
    static let postPage = _R.storyboard.postPage()
    /// Storyboard `SettingPage`.
    static let settingPage = _R.storyboard.settingPage()
    /// Storyboard `WorthPage`.
    static let worthPage = _R.storyboard.worthPage()
    
    /// `UIStoryboard(name: "BuiltWallet", bundle: ...)`
    static func builtWallet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.builtWallet)
    }
    
    /// `UIStoryboard(name: "CyclePage", bundle: ...)`
    static func cyclePage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cyclePage)
    }
    
    /// `UIStoryboard(name: "HomePage", bundle: ...)`
    static func homePage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homePage)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MinePage", bundle: ...)`
    static func minePage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.minePage)
    }
    
    /// `UIStoryboard(name: "NoticeView", bundle: ...)`
    static func noticeView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.noticeView)
    }
    
    /// `UIStoryboard(name: "PostPage", bundle: ...)`
    static func postPage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.postPage)
    }
    
    /// `UIStoryboard(name: "SettingPage", bundle: ...)`
    static func settingPage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingPage)
    }
    
    /// `UIStoryboard(name: "WorthPage", bundle: ...)`
    static func worthPage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.worthPage)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.language` struct is generated, and contains static references to 305 localization keys.
    struct language {
      /// zh translation:   未备份  
      /// 
      /// Locales: zh, en
      static let have_NOT_BACKUP = Rswift.StringResource(key: "HAVE_NOT_BACKUP", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation:  组记词格式错误
      /// 
      /// Locales: zh, en
      static let mnemonic_TEXT_ERROR = Rswift.StringResource(key: "MNEMONIC_TEXT_ERROR", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: %d分钟前
      /// 
      /// Locales: zh, en
      static let time_min_ago = Rswift.StringResource(key: "time_min_ago", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: %d天前
      /// 
      /// Locales: zh, en
      static let time_day_ago = Rswift.StringResource(key: "time_day_ago", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: %d小时前
      /// 
      /// Locales: zh, en
      static let time_hour_ago = Rswift.StringResource(key: "time_hour_ago", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: %d年前
      /// 
      /// Locales: zh, en
      static let time_year_ago = Rswift.StringResource(key: "time_year_ago", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: %d月前
      /// 
      /// Locales: zh, en
      static let time_mouths_ago = Rswift.StringResource(key: "time_mouths_ago", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: + 关注
      /// 
      /// Locales: zh, en
      static let cycle_un_followed = Rswift.StringResource(key: "cycle_un_followed", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 1.选择转载许可协议
      /// 
      /// Locales: zh, en
      static let agreeMent_title1 = Rswift.StringResource(key: "agreeMent_title1", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 100 PST 已放入账户余额中
      /// 
      /// Locales: zh, en
      static let common_pst_notice = Rswift.StringResource(key: "common_pst_notice", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 12个助记词
      /// 
      /// Locales: zh, en
      static let mnemonic_SUB_TITLE = Rswift.StringResource(key: "MNEMONIC_SUB_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 2.是否允许您的作品被改编
      /// 
      /// Locales: zh, en
      static let agreeMent_title2 = Rswift.StringResource(key: "agreeMent_title2", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 3.是否允许商业使用
      /// 
      /// Locales: zh, en
      static let agreeMent_title3 = Rswift.StringResource(key: "agreeMent_title3", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: DNA
      /// 
      /// Locales: zh, en
      static let common_dna = Rswift.StringResource(key: "common_dna", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: DTCP
      /// 
      /// Locales: zh, en
      static let common_dtcp = Rswift.StringResource(key: "common_dtcp", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: HP值
      /// 
      /// Locales: zh, en
      static let mine_hp = Rswift.StringResource(key: "mine_hp", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: Keystore 导入
      /// 
      /// Locales: zh, en
      static let import_KEYSTORE = Rswift.StringResource(key: "IMPORT_KEYSTORE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: Keystore 文本
      /// 
      /// Locales: zh, en
      static let keystore_TEXT = Rswift.StringResource(key: "KEYSTORE_TEXT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: Keystore 是加密后的私钥,你可以存储在U盘或者密码管理工具里。存储Keystore时要和钱包密码分开存储, 只要密码强度足够强, 即时Keystore遗失也很难破解而得到你的钱包资产。
      /// 
      /// Locales: zh, en
      static let keystoreback_SUB_CONTENT = Rswift.StringResource(key: "KEYSTOREBACK_SUB_CONTENT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: Keystore 格式错误
      /// 
      /// Locales: zh, en
      static let geth_INPUT_ERROR = Rswift.StringResource(key: "GETH_INPUT_ERROR", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: Keystore备份
      /// 
      /// Locales: zh, en
      static let keystore_BACKUP = Rswift.StringResource(key: "KEYSTORE_BACKUP", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: Keystore备份
      /// 
      /// Locales: zh, en
      static let use_keystore_backup = Rswift.StringResource(key: "use_keystore_backup", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: PST
      /// 
      /// Locales: zh, en
      static let common_Pst = Rswift.StringResource(key: "common_Pst", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: ⚠️ 注意
      /// 
      /// Locales: zh, en
      static let mnemonic_BACK_NOTICE = Rswift.StringResource(key: "MNEMONIC_BACK_NOTICE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 下一步
      /// 
      /// Locales: zh, en
      static let commom_NEXT_STEP = Rswift.StringResource(key: "COMMOM_NEXT_STEP", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 下一步
      /// 
      /// Locales: zh, en
      static let common_Nextstep = Rswift.StringResource(key: "common_Nextstep", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 与
      /// 
      /// Locales: zh, en
      static let pwd_DEAL3 = Rswift.StringResource(key: "PWD_DEAL3", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 两次密码不一致
      /// 
      /// Locales: zh, en
      static let different_PWD = Rswift.StringResource(key: "DIFFERENT_PWD", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 个人指数
      /// 
      /// Locales: zh, en
      static let mine_grade = Rswift.StringResource(key: "mine_grade", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 个字符
      /// 
      /// Locales: zh, en
      static let some_CHARACTER = Rswift.StringResource(key: "SOME_CHARACTER", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 中
      /// 
      /// Locales: zh, en
      static let pwd_LEVEL2 = Rswift.StringResource(key: "PWD_LEVEL2", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 中
      /// 
      /// Locales: zh, en
      static let set_level_middle = Rswift.StringResource(key: "set_level_middle", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 交易列表
      /// 
      /// Locales: zh, en
      static let paymnet_LIST = Rswift.StringResource(key: "PAYMNET_LIST", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 交易号
      /// 
      /// Locales: zh, en
      static let transcation_INDEX = Rswift.StringResource(key: "TRANSCATION_INDEX", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 交易成功
      /// 
      /// Locales: zh, en
      static let payment_STATUS_SUCCEED = Rswift.StringResource(key: "PAYMENT_STATUS_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 交易记录
      /// 
      /// Locales: zh, en
      static let recent_PAYMENT = Rswift.StringResource(key: "RECENT_PAYMENT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 交易详情
      /// 
      /// Locales: zh, en
      static let payment_DEATIL = Rswift.StringResource(key: "PAYMENT_DEATIL", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 他的内容
      /// 
      /// Locales: zh, en
      static let mine_content_other = Rswift.StringResource(key: "mine_content_other", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 他的圈子
      /// 
      /// Locales: zh, en
      static let mine_cycle_other = Rswift.StringResource(key: "mine_cycle_other", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 付款地址
      /// 
      /// Locales: zh, en
      static let transfor_FROM_ADDRESS = Rswift.StringResource(key: "TRANSFOR_FROM_ADDRESS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 低
      /// 
      /// Locales: zh, en
      static let set_level_low = Rswift.StringResource(key: "set_level_low", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 作品信息
      /// 
      /// Locales: zh, en
      static let article_content_info = Rswift.StringResource(key: "article_content_info", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 作品区块链地址：
      /// 
      /// Locales: zh, en
      static let article_blockChain_address = Rswift.StringResource(key: "article_blockChain_address", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 作者
      /// 
      /// Locales: zh, en
      static let common_author = Rswift.StringResource(key: "common_author", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 你的转账金额超过100ETH，鉴于区块链交易的不可逆性，我们为你生成0.000001ETH的小额转账信息，以测试目标地址的正确性。
      /// 
      /// Locales: zh, en
      static let test_PAYMNT_WARN = Rswift.StringResource(key: "TEST_PAYMNT_WARN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 你还没有联系人
      /// 
      /// Locales: zh, en
      static let empty_COMTACTLIST = Rswift.StringResource(key: "EMPTY_COMTACTLIST", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 使用助记词备份
      /// 
      /// Locales: zh, en
      static let use_nmonnic_backup = Rswift.StringResource(key: "use_nmonnic_backup", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 使用帮助
      /// 
      /// Locales: zh, en
      static let set_HEPLER_TITLE = Rswift.StringResource(key: "SET_HEPLER_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 便捷指数：
      /// 
      /// Locales: zh, en
      static let set_convenient_level = Rswift.StringResource(key: "set_convenient_level", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 修改
      /// 
      /// Locales: zh, en
      static let cycle_update = Rswift.StringResource(key: "cycle_update", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 修改名字
      /// 
      /// Locales: zh, en
      static let mine_name_update = Rswift.StringResource(key: "mine_name_update", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 免责声明
      /// 
      /// Locales: zh, en
      static let keystore_WARN_TITLE = Rswift.StringResource(key: "KEYSTORE_WARN_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 全部
      /// 
      /// Locales: zh, en
      static let common_all = Rswift.StringResource(key: "common_all", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 关于我们
      /// 
      /// Locales: zh, en
      static let set_ABOUTUS_TITLE = Rswift.StringResource(key: "SET_ABOUTUS_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 关注
      /// 
      /// Locales: zh, en
      static let cycle_follow = Rswift.StringResource(key: "cycle_follow", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 内容
      /// 
      /// Locales: zh, en
      static let cycle_content = Rswift.StringResource(key: "cycle_content", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 内容
      /// 
      /// Locales: zh, en
      static let post_content_place = Rswift.StringResource(key: "post_content_place", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 冻结
      /// 
      /// Locales: zh, en
      static let value_pst_locked = Rswift.StringResource(key: "value_pst_locked", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 刚刚
      /// 
      /// Locales: zh, en
      static let time_just_ago = Rswift.StringResource(key: "time_just_ago", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建
      /// 
      /// Locales: zh, en
      static let cycle_create = Rswift.StringResource(key: "cycle_create", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建圈子
      /// 
      /// Locales: zh, en
      static let cycle_creat_title = Rswift.StringResource(key: "cycle_creat_title", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建圈子 获得更多PST
      /// 
      /// Locales: zh, en
      static let create_cicrcle_prompt = Rswift.StringResource(key: "create_cicrcle_prompt", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建圈子将锁定
      /// 
      /// Locales: zh, en
      static let cycle_create_lock = Rswift.StringResource(key: "cycle_create_lock", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建用户名
      /// 
      /// Locales: zh, en
      static let built_create_username = Rswift.StringResource(key: "built_create_username", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建者
      /// 
      /// Locales: zh, en
      static let cycle_founder = Rswift.StringResource(key: "cycle_founder", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建账号
      /// 
      /// Locales: zh, en
      static let built_WALLET = Rswift.StringResource(key: "BUILT_WALLET", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建账户
      /// 
      /// Locales: zh, en
      static let common_create_account = Rswift.StringResource(key: "common_create_account", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 创建钱包即代表同意TokenUp
      /// 
      /// Locales: zh, en
      static let pwd_DEAL1 = Rswift.StringResource(key: "PWD_DEAL1", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 删除
      /// 
      /// Locales: zh, en
      static let common_DELETE = Rswift.StringResource(key: "COMMON_DELETE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 删除
      /// 
      /// Locales: zh, en
      static let common_Delete = Rswift.StringResource(key: "common_Delete", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 加入
      /// 
      /// Locales: zh, en
      static let title_cicrcle_added = Rswift.StringResource(key: "title_cicrcle_added", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 加入圈子将锁定
      /// 
      /// Locales: zh, en
      static let cycle_join_lock = Rswift.StringResource(key: "cycle_join_lock", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 加入该圈子
      /// 
      /// Locales: zh, en
      static let cycle_join = Rswift.StringResource(key: "cycle_join", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 加入该圈子才能操作，是否申请加入?
      /// 
      /// Locales: zh, en
      static let need_join_circle = Rswift.StringResource(key: "need_join_circle", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 加载中
      /// 
      /// Locales: zh, en
      static let common_LOAD = Rswift.StringResource(key: "COMMON_LOAD", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 加载中
      /// 
      /// Locales: zh, en
      static let common_Load = Rswift.StringResource(key: "common_Load", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 助记词备份
      /// 
      /// Locales: zh, en
      static let mnemonic_BACK_TITLE = Rswift.StringResource(key: "MNEMONIC_BACK_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 助记词备份完成
      /// 
      /// Locales: zh, en
      static let mnemonic_WARN_TITLE = Rswift.StringResource(key: "MNEMONIC_WARN_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 助记词备份完成后将会从钱包备份项移除，请确保已安全保存助记词，助记词一旦遗失将不能找回！
      /// 
      /// Locales: zh, en
      static let mnemonic_WARN_CONTENT = Rswift.StringResource(key: "MNEMONIC_WARN_CONTENT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 助记词导入
      /// 
      /// Locales: zh, en
      static let import_MNEMONIC = Rswift.StringResource(key: "IMPORT_MNEMONIC", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 区块
      /// 
      /// Locales: zh, en
      static let transcation_BLOCK = Rswift.StringResource(key: "TRANSCATION_BLOCK", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 区块链信息
      /// 
      /// Locales: zh, en
      static let blockchain_info = Rswift.StringResource(key: "blockchain_info", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 区块链地址
      /// 
      /// Locales: zh, en
      static let blockchain_address = Rswift.StringResource(key: "blockchain_address", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 区块链钱包是基于密码学的去中心化账号系统。任何意外发生将导致资产丢失，所以我们建议你及时做好钱包的备份。
      /// 
      /// Locales: zh, en
      static let wallet_BACKUP_WARN = Rswift.StringResource(key: "WALLET_BACKUP_WARN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 原创
      /// 
      /// Locales: zh, en
      static let common_orignal_author = Rswift.StringResource(key: "common_orignal_author", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 去充值
      /// 
      /// Locales: zh, en
      static let go_to_charge = Rswift.StringResource(key: "go_to_charge", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 去创建
      /// 
      /// Locales: zh, en
      static let go_to_create = Rswift.StringResource(key: "go_to_create", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 去发布
      /// 
      /// Locales: zh, en
      static let cycle_go_write = Rswift.StringResource(key: "cycle_go_write", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 去发布内容
      /// 
      /// Locales: zh, en
      static let cycle_write_article = Rswift.StringResource(key: "cycle_write_article", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 去圈子
      /// 
      /// Locales: zh, en
      static let cycle_goto = Rswift.StringResource(key: "cycle_goto", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 反馈问题已提交
      /// 
      /// Locales: zh, en
      static let feedback_SUCCEED = Rswift.StringResource(key: "FEEDBACK_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 发布
      /// 
      /// Locales: zh, en
      static let common_Post = Rswift.StringResource(key: "common_Post", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 发布一条内容将锁定
      /// 
      /// Locales: zh, en
      static let post_article_title = Rswift.StringResource(key: "post_article_title", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 发布到圈子
      /// 
      /// Locales: zh, en
      static let post_to_circle = Rswift.StringResource(key: "post_to_circle", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 发布时间
      /// 
      /// Locales: zh, en
      static let common_publish_time = Rswift.StringResource(key: "common_publish_time", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 发布首条内容可获得PST
      /// 
      /// Locales: zh, en
      static let cycle_no_content_tip = Rswift.StringResource(key: "cycle_no_content_tip", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 发现
      /// 
      /// Locales: zh, en
      static let cycle_discover = Rswift.StringResource(key: "cycle_discover", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 发送方地址
      /// 
      /// Locales: zh, en
      static let set_MONEY_ADDRESS = Rswift.StringResource(key: "SET_MONEY_ADDRESS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 取消
      /// 
      /// Locales: zh, en
      static let cancel_BUTTON = Rswift.StringResource(key: "CANCEL_BUTTON", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 取消
      /// 
      /// Locales: zh, en
      static let common_Cancel = Rswift.StringResource(key: "common_Cancel", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 取消关注
      /// 
      /// Locales: zh, en
      static let cycle_cancel_follow = Rswift.StringResource(key: "cycle_cancel_follow", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 可在设置中进行备份,
      /// 
      /// Locales: zh, en
      static let backup_WARN = Rswift.StringResource(key: "BACKUP_WARN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 可用(PST)
      /// 
      /// Locales: zh, en
      static let record_available = Rswift.StringResource(key: "record_available", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 可用余额
      /// 
      /// Locales: zh, en
      static let aviable_MONEY = Rswift.StringResource(key: "AVIABLE_MONEY", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 可用余额不足
      /// 
      /// Locales: zh, en
      static let no_ENOUGH_MONEY = Rswift.StringResource(key: "NO_ENOUGH_MONEY", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 名
      /// 
      /// Locales: zh, en
      static let contact_NAME = Rswift.StringResource(key: "CONTACT_NAME", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 否
      /// 
      /// Locales: zh, en
      static let common_no = Rswift.StringResource(key: "common_no", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 商业许可协议
      /// 
      /// Locales: zh, en
      static let agreeMent_select2 = Rswift.StringResource(key: "agreeMent_select2", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 圈子
      /// 
      /// Locales: zh, en
      static let cycle_title = Rswift.StringResource(key: "cycle_title", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 圈子创建成功!
      /// 
      /// Locales: zh, en
      static let cycle_creat_sucess = Rswift.StringResource(key: "cycle_creat_sucess", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 备份
      /// 
      /// Locales: zh, en
      static let set_backup_title = Rswift.StringResource(key: "set_backup_title", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 备注
      /// 
      /// Locales: zh, en
      static let transfor_INFO = Rswift.StringResource(key: "TRANSFOR_INFO", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 备注
      /// 
      /// Locales: zh, en
      static let transfor_INFO_TEXT = Rswift.StringResource(key: "TRANSFOR_INFO_TEXT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 姓名
      /// 
      /// Locales: zh, en
      static let contact_SURE_NAME = Rswift.StringResource(key: "CONTACT_SURE_NAME", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 安全指数：
      /// 
      /// Locales: zh, en
      static let set_safe_level = Rswift.StringResource(key: "set_safe_level", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 完成
      /// 
      /// Locales: zh, en
      static let confirm_BUTTON = Rswift.StringResource(key: "CONFIRM_BUTTON", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 完成
      /// 
      /// Locales: zh, en
      static let finish_BUTTON = Rswift.StringResource(key: "FINISH_BUTTON", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 密码错误
      /// 
      /// Locales: zh, en
      static let pwd_ERROR = Rswift.StringResource(key: "PWD_ERROR", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 密钥是确认您身份的唯一信息，是一串复杂的字符串，为了方便您的使用，您只需要在操作中使用您设置的密钥保护码即可。  为了保护账户安全请立即备份私钥，以便账户异常后重新导入。
      /// 
      /// Locales: zh, en
      static let set_backup_content = Rswift.StringResource(key: "set_backup_content", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 导入账号
      /// 
      /// Locales: zh, en
      static let restore_WALLET = Rswift.StringResource(key: "RESTORE_WALLET", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 导入钱包
      /// 
      /// Locales: zh, en
      static let builtwalleT = Rswift.StringResource(key: "BUILTWALLET", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 导出密钥备份
      /// 
      /// Locales: zh, en
      static let use_privatekey_backup = Rswift.StringResource(key: "use_privatekey_backup", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 将取景框对准二维码，即可自动扫描
      /// 
      /// Locales: zh, en
      static let scan_PROMPT = Rswift.StringResource(key: "SCAN_PROMPT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 小额试转
      /// 
      /// Locales: zh, en
      static let test_PAYMNT = Rswift.StringResource(key: "TEST_PAYMNT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 小额试转提醒
      /// 
      /// Locales: zh, en
      static let test_PAYMNT_PROMPT = Rswift.StringResource(key: "TEST_PAYMNT_PROMPT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 已关注
      /// 
      /// Locales: zh, en
      static let cycle_followed = Rswift.StringResource(key: "cycle_followed", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 已加入
      /// 
      /// Locales: zh, en
      static let cycle_my_joined = Rswift.StringResource(key: "cycle_my_joined", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 已发布%d条内容
      /// 
      /// Locales: zh, en
      static let cycle_content_num = Rswift.StringResource(key: "cycle_content_num", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 已复制到剪切板
      /// 
      /// Locales: zh, en
      static let paste_SUCCEED = Rswift.StringResource(key: "PASTE_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 已点赞
      /// 
      /// Locales: zh, en
      static let notice_liked = Rswift.StringResource(key: "notice_liked", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 已申请加入圈子, 待审核完成后可进行操作。
      /// 
      /// Locales: zh, en
      static let article_join_circle = Rswift.StringResource(key: "article_join_circle", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 已输入
      /// 
      /// Locales: zh, en
      static let text_ENTERED = Rswift.StringResource(key: "TEXT_ENTERED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 币种
      /// 
      /// Locales: zh, en
      static let select_CURRENCY = Rswift.StringResource(key: "SELECT_CURRENCY", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 币种选择
      /// 
      /// Locales: zh, en
      static let no_SELECT_COIN = Rswift.StringResource(key: "NO_SELECT_COIN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 常用标签
      /// 
      /// Locales: zh, en
      static let normal_use_tags = Rswift.StringResource(key: "normal_use_tags", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 建立你的账户  关注你感兴趣的内容
      /// 
      /// Locales: zh, en
      static let common_create_prompt = Rswift.StringResource(key: "common_create_prompt", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 建立你的账户  立刻获取奖励
      /// 
      /// Locales: zh, en
      static let common_create_prompt2 = Rswift.StringResource(key: "common_create_prompt2", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 开始导入
      /// 
      /// Locales: zh, en
      static let begin_IMPORT = Rswift.StringResource(key: "BEGIN_IMPORT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 弱
      /// 
      /// Locales: zh, en
      static let pwd_LEVEL1 = Rswift.StringResource(key: "PWD_LEVEL1", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 强
      /// 
      /// Locales: zh, en
      static let pwd_LEVEL3 = Rswift.StringResource(key: "PWD_LEVEL3", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 当你的HP值过低时，你的操作将不对内容的评价产生影响
      /// 
      /// Locales: zh, en
      static let notice_hp_prompt = Rswift.StringResource(key: "notice_hp_prompt", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 当前HP: 
      /// 
      /// Locales: zh, en
      static let notice_current_hp = Rswift.StringResource(key: "notice_current_hp", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 当前PST余额不足
      /// 
      /// Locales: zh, en
      static let no_pst_warn = Rswift.StringResource(key: "no_pst_warn", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 当前可用PST: 
      /// 
      /// Locales: zh, en
      static let post_transfor_pst = Rswift.StringResource(key: "post_transfor_pst", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 快
      /// 
      /// Locales: zh, en
      static let commom_FAST = Rswift.StringResource(key: "COMMOM_FAST", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 快速查看
      /// 
      /// Locales: zh, en
      static let common_quick_look = Rswift.StringResource(key: "common_quick_look", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 总交易量
      /// 
      /// Locales: zh, en
      static let common_ALL_TRANSCATION = Rswift.StringResource(key: "COMMON_ALL_TRANSCATION", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 总资产
      /// 
      /// Locales: zh, en
      static let all_FUNDS = Rswift.StringResource(key: "ALL_FUNDS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 意见反馈
      /// 
      /// Locales: zh, en
      static let set_SUGGES_TITLE = Rswift.StringResource(key: "SET_SUGGES_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 慢
      /// 
      /// Locales: zh, en
      static let commom_SLOW = Rswift.StringResource(key: "COMMOM_SLOW", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 成功转发到圈子
      /// 
      /// Locales: zh, en
      static let share_to_circle_success = Rswift.StringResource(key: "share_to_circle_success", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 成员
      /// 
      /// Locales: zh, en
      static let cycle_member = Rswift.StringResource(key: "cycle_member", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 成员数
      /// 
      /// Locales: zh, en
      static let cycle_member_num = Rswift.StringResource(key: "cycle_member_num", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 我创建的
      /// 
      /// Locales: zh, en
      static let cycle_my_created = Rswift.StringResource(key: "cycle_my_created", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 我已理解并同意服务条款与隐私协议
      /// 
      /// Locales: zh, en
      static let agreement_WARN = Rswift.StringResource(key: "AGREEMENT_WARN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 我的Token总额 (PST)
      /// 
      /// Locales: zh, en
      static let record_mine = Rswift.StringResource(key: "record_mine", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 我的内容
      /// 
      /// Locales: zh, en
      static let mine_content = Rswift.StringResource(key: "mine_content", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 我的圈子
      /// 
      /// Locales: zh, en
      static let mine_cycle = Rswift.StringResource(key: "mine_cycle", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 扫一扫
      /// 
      /// Locales: zh, en
      static let main_SCAN = Rswift.StringResource(key: "MAIN_SCAN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 扫描二维码，向我付款
      /// 
      /// Locales: zh, en
      static let getmoney_PROMPT = Rswift.StringResource(key: "GETMONEY_PROMPT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 指纹设置
      /// 
      /// Locales: zh, en
      static let set_FINGERPRINT_TITLE = Rswift.StringResource(key: "SET_FINGERPRINT_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 换一批
      /// 
      /// Locales: zh, en
      static let common_change_data = Rswift.StringResource(key: "common_change_data", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 排版协议
      /// 
      /// Locales: zh, en
      static let article_format_agressment = Rswift.StringResource(key: "article_format_agressment", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 提交
      /// 
      /// Locales: zh, en
      static let common_SUBMIT = Rswift.StringResource(key: "COMMON_SUBMIT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 提示
      /// 
      /// Locales: zh, en
      static let common_NOTICE = Rswift.StringResource(key: "COMMON_NOTICE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 摄像头不可用
      /// 
      /// Locales: zh, en
      static let scan_ERROE2 = Rswift.StringResource(key: "SCAN_ERROE2", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 操作成功,可在加入列表查看状态。
      /// 
      /// Locales: zh, en
      static let join_circle_tip = Rswift.StringResource(key: "join_circle_tip", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 支付币种
      /// 
      /// Locales: zh, en
      static let transfor_COIN = Rswift.StringResource(key: "TRANSFOR_COIN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 收款
      /// 
      /// Locales: zh, en
      static let main_GETMONEY = Rswift.StringResource(key: "MAIN_GETMONEY", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 收款地址
      /// 
      /// Locales: zh, en
      static let getmoney_ADDRESS = Rswift.StringResource(key: "GETMONEY_ADDRESS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 收款方地址
      /// 
      /// Locales: zh, en
      static let get_MONEY_ADDRESS = Rswift.StringResource(key: "GET_MONEY_ADDRESS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 收款金额
      /// 
      /// Locales: zh, en
      static let transfor_GET_VALUE = Rswift.StringResource(key: "TRANSFOR_GET_VALUE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 数字签名
      /// 
      /// Locales: zh, en
      static let common_signature = Rswift.StringResource(key: "common_signature", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 文章哈希
      /// 
      /// Locales: zh, en
      static let article_hash = Rswift.StringResource(key: "article_hash", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 新建联系人
      /// 
      /// Locales: zh, en
      static let add_CONTACT = Rswift.StringResource(key: "ADD_CONTACT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 无
      /// 
      /// Locales: zh, en
      static let transfor_INFO_NONE = Rswift.StringResource(key: "TRANSFOR_INFO_NONE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 无任何交易记录
      /// 
      /// Locales: zh, en
      static let no_PAYMENT = Rswift.StringResource(key: "NO_PAYMENT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 无法识别
      /// 
      /// Locales: zh, en
      static let scan_ERROE1 = Rswift.StringResource(key: "SCAN_ERROE1", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 昨日(PST)
      /// 
      /// Locales: zh, en
      static let record_yesterday = Rswift.StringResource(key: "record_yesterday", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 昨日Token发放数 %0.2f
      /// 
      /// Locales: zh, en
      static let record_yesterday2 = Rswift.StringResource(key: "record_yesterday2", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 是
      /// 
      /// Locales: zh, en
      static let common_yes = Rswift.StringResource(key: "common_yes", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 是,只要他人以相同方式共享
      /// 
      /// Locales: zh, en
      static let agreeMent_select3 = Rswift.StringResource(key: "agreeMent_select3", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 暂无关注
      /// 
      /// Locales: zh, en
      static let common_no_subscription = Rswift.StringResource(key: "common_no_subscription", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 暂无数据
      /// 
      /// Locales: zh, en
      static let common_no_content = Rswift.StringResource(key: "common_no_content", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 暂无更多数据
      /// 
      /// Locales: zh, en
      static let common_no_more_data = Rswift.StringResource(key: "common_no_more_data", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 暂无相应汇率信息
      /// 
      /// Locales: zh, en
      static let no_RATIO_INFO = Rswift.StringResource(key: "NO_RATIO_INFO", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 更改协议 >
      /// 
      /// Locales: zh, en
      static let article_change_agree = Rswift.StringResource(key: "article_change_agree", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 最多24个字符
      /// 
      /// Locales: zh, en
      static let notice_count_limit = Rswift.StringResource(key: "notice_count_limit", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 服务条款
      /// 
      /// Locales: zh, en
      static let pwd_DEAL2 = Rswift.StringResource(key: "PWD_DEAL2", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 未知
      /// 
      /// Locales: zh, en
      static let common_unknown = Rswift.StringResource(key: "common_unknown", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 未知网络错误
      /// 
      /// Locales: zh, en
      static let common_unknow_network = Rswift.StringResource(key: "common_unknow_network", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 未输入任何内容
      /// 
      /// Locales: zh, en
      static let nothing_INPUT = Rswift.StringResource(key: "NOTHING_INPUT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 未选中任何圈子
      /// 
      /// Locales: zh, en
      static let select_zero_circle = Rswift.StringResource(key: "select_zero_circle", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 本作品采用 <red>知识共享署名-相同方式共享 4.0 国际许可协议</red> 进行许可。<gray>  ● 允许复制、发行、展览和表演作品，但必须按照指定的方式对作品进行署名  ● 允许复制、发行、展览和表演作品，包括出于商业目的进行上述活动  ● 允许复制、发行演绎作品，但演绎作品必须采用与本协议相同或兼容的协议进行许可</gray>  <black>提示：版权协议不包括文章中的图片</black>
      /// 
      /// Locales: zh, en
      static let article_content_agree = Rswift.StringResource(key: "article_content_agree", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 本次操作将消耗HP
      /// 
      /// Locales: zh, en
      static let post_usdHp_warn = Rswift.StringResource(key: "post_usdHp_warn", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 查看作品详细信息
      /// 
      /// Locales: zh, en
      static let look_article_info = Rswift.StringResource(key: "look_article_info", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 查看更多
      /// 
      /// Locales: zh, en
      static let cycle_des_more = Rswift.StringResource(key: "cycle_des_more", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 标签
      /// 
      /// Locales: zh, en
      static let common_tags = Rswift.StringResource(key: "common_tags", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 标题
      /// 
      /// Locales: zh, en
      static let post_title_place = Rswift.StringResource(key: "post_title_place", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 核对助记词
      /// 
      /// Locales: zh, en
      static let check_MNEMONIC_TITLE = Rswift.StringResource(key: "CHECK_MNEMONIC_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 正确输入您钱包的12个组记词, 词与词之间用空格表示, 并设置新的钱包密码。
      /// 
      /// Locales: zh, en
      static let mnemonic_TEXT_WARN = Rswift.StringResource(key: "MNEMONIC_TEXT_WARN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 此联系人已存在，无需添加。
      /// 
      /// Locales: zh, en
      static let exisit_CONTACT = Rswift.StringResource(key: "EXISIT_CONTACT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 注册时间
      /// 
      /// Locales: zh, en
      static let common_register_time = Rswift.StringResource(key: "common_register_time", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 注意
      /// 
      /// Locales: zh, en
      static let commom_PRPMPT = Rswift.StringResource(key: "COMMOM_PRPMPT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 注意
      /// 
      /// Locales: zh, en
      static let common_Prpmpt = Rswift.StringResource(key: "common_Prpmpt", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 添加成功
      /// 
      /// Locales: zh, en
      static let add_CONTACT_SUCCEED = Rswift.StringResource(key: "ADD_CONTACT_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 添加标签
      /// 
      /// Locales: zh, en
      static let common_add_tags = Rswift.StringResource(key: "common_add_tags", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 点击或下拉刷新
      /// 
      /// Locales: zh, en
      static let common_pull_load = Rswift.StringResource(key: "common_pull_load", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 点击账号可复制
      /// 
      /// Locales: zh, en
      static let click_PASTE = Rswift.StringResource(key: "CLICK_PASTE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 点赞
      /// 
      /// Locales: zh, en
      static let common_like = Rswift.StringResource(key: "common_like", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 点赞成功
      /// 
      /// Locales: zh, en
      static let notice_like_success = Rswift.StringResource(key: "notice_like_success", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 版本号
      /// 
      /// Locales: zh, en
      static let common_APP_VERSION = Rswift.StringResource(key: "COMMON_APP_VERSION", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 版权协议
      /// 
      /// Locales: zh, en
      static let agreeMent_nav_title = Rswift.StringResource(key: "agreeMent_nav_title", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 用户名
      /// 
      /// Locales: zh, en
      static let common_username = Rswift.StringResource(key: "common_username", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 用户名不合法
      /// 
      /// Locales: zh, en
      static let username_formated_error = Rswift.StringResource(key: "username_formated_error", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 用户名至多30个字符，支持英文、数字，不支持重复的用户名。
      /// 
      /// Locales: zh, en
      static let built_username_limit = Rswift.StringResource(key: "built_username_limit", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 知识共享许可协议
      /// 
      /// Locales: zh, en
      static let agreeMent_select1 = Rswift.StringResource(key: "agreeMent_select1", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 矿工费用
      /// 
      /// Locales: zh, en
      static let pow_MONEY = Rswift.StringResource(key: "POW_MONEY", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 确定
      /// 
      /// Locales: zh, en
      static let common_Confirm = Rswift.StringResource(key: "common_Confirm", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 确定创建
      /// 
      /// Locales: zh, en
      static let cycle_creat_confirm = Rswift.StringResource(key: "cycle_creat_confirm", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 确定要去退出%@吗？
      /// 
      /// Locales: zh, en
      static let cycle_exit_tip = Rswift.StringResource(key: "cycle_exit_tip", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 确定要取消对圈子的关注吗？
      /// 
      /// Locales: zh, en
      static let cycle_unfollow_tip = Rswift.StringResource(key: "cycle_unfollow_tip", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 确定退出钱包?
      /// 
      /// Locales: zh, en
      static let quit_WALLET_Title = Rswift.StringResource(key: "QUIT_WALLET_Title", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 确认中
      /// 
      /// Locales: zh, en
      static let connect_PENDING = Rswift.StringResource(key: "CONNECT_PENDING", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 确认中
      /// 
      /// Locales: zh, en
      static let post_to_auditting = Rswift.StringResource(key: "post_to_auditting", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 私钥
      /// 
      /// Locales: zh, en
      static let import_PRIVATYKE = Rswift.StringResource(key: "IMPORT_PRIVATYKE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 立即备份
      /// 
      /// Locales: zh, en
      static let backup_NOW = Rswift.StringResource(key: "BACKUP_NOW", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 笔交易
      /// 
      /// Locales: zh, en
      static let num_OF_PAYMNET = Rswift.StringResource(key: "NUM_OF_PAYMNET", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 简介
      /// 
      /// Locales: zh, en
      static let cycle_des = Rswift.StringResource(key: "cycle_des", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 编辑
      /// 
      /// Locales: zh, en
      static let common_edit = Rswift.StringResource(key: "common_edit", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 网络连接不可用
      /// 
      /// Locales: zh, en
      static let common_network_error = Rswift.StringResource(key: "common_network_error", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 网络连接失败
      /// 
      /// Locales: zh, en
      static let connect_SEEVER_ERROR = Rswift.StringResource(key: "CONNECT_SEEVER_ERROR", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 联系人
      /// 
      /// Locales: zh, en
      static let main_CONTACT = Rswift.StringResource(key: "MAIN_CONTACT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 至少8个字符，请使用使用大小写、数字、字母、字符组合。
      /// 
      /// Locales: zh, en
      static let pwd_LIMIT = Rswift.StringResource(key: "PWD_LIMIT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 获取资产失败
      /// 
      /// Locales: zh, en
      static let get_FUNDS_ERROR = Rswift.StringResource(key: "GET_FUNDS_ERROR", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 获得PST
      /// 
      /// Locales: zh, en
      static let cycle_no_content_tip2 = Rswift.StringResource(key: "cycle_no_content_tip2", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 设置
      /// 
      /// Locales: zh, en
      static let setting_PAGE = Rswift.StringResource(key: "SETTING_PAGE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 评论
      /// 
      /// Locales: zh, en
      static let common_comment = Rswift.StringResource(key: "common_comment", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 评论成功
      /// 
      /// Locales: zh, en
      static let notice_comment_success = Rswift.StringResource(key: "notice_comment_success", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 语言切换成功
      /// 
      /// Locales: zh, en
      static let switch_LANGUAGE_SUCCEED = Rswift.StringResource(key: "SWITCH_LANGUAGE_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 语言设置
      /// 
      /// Locales: zh, en
      static let set_LANGUAGE_TITLE = Rswift.StringResource(key: "SET_LANGUAGE_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请填写反馈问题
      /// 
      /// Locales: zh, en
      static let feedback_NO_CONTENT = Rswift.StringResource(key: "FEEDBACK_NO_CONTENT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请填写转入地址
      /// 
      /// Locales: zh, en
      static let transfor_NO_ADDRESS = Rswift.StringResource(key: "TRANSFOR_NO_ADDRESS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请填写转出金额
      /// 
      /// Locales: zh, en
      static let no_SELECT_TRANSFOR_VALUE = Rswift.StringResource(key: "NO_SELECT_TRANSFOR_VALUE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请按顺序通过手记方式记下您的12个助记词, 助记词非常重要, 任何人得到您的助记词就得到了您资产的所有权,所以请将助记词保存到安全的地方。
      /// 
      /// Locales: zh, en
      static let mnemonic_BACK_WARN = Rswift.StringResource(key: "MNEMONIC_BACK_WARN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请描述您遇到的问题以便我们提供更好的帮助
      /// 
      /// Locales: zh, en
      static let feed_BACK_PROMPT = Rswift.StringResource(key: "FEED_BACK_PROMPT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请确保钱包已备份至安全的地方， TokenUp将不承担任何钱包丢失，被盗，忘记密码等产生的资产损失！
      /// 
      /// Locales: zh, en
      static let keystore_WARN_CONTENT = Rswift.StringResource(key: "KEYSTORE_WARN_CONTENT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请设置密码, 并及时做好本地备份, 它是您使用整个Primas重要操作的通行凭证。
      /// 
      /// Locales: zh, en
      static let built_WALLET_WARN = Rswift.StringResource(key: "BUILT_WALLET_WARN", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入内容
      /// 
      /// Locales: zh, en
      static let post_no_content = Rswift.StringResource(key: "post_no_content", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入名字
      /// 
      /// Locales: zh, en
      static let contact_NO_NAME = Rswift.StringResource(key: "CONTACT_NO_NAME", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入地址
      /// 
      /// Locales: zh, en
      static let contact_NO_ADDRESS = Rswift.StringResource(key: "CONTACT_NO_ADDRESS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入姓氏
      /// 
      /// Locales: zh, en
      static let contact_NO_SURENAME = Rswift.StringResource(key: "CONTACT_NO_SURENAME", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入密码
      /// 
      /// Locales: zh, en
      static let input_PWD_TITLE = Rswift.StringResource(key: "INPUT_PWD_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入密钥保护码
      /// 
      /// Locales: zh, en
      static let notice_input_pwd = Rswift.StringResource(key: "notice_input_pwd", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入标题
      /// 
      /// Locales: zh, en
      static let post_no_title = Rswift.StringResource(key: "post_no_title", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入正确的地址
      /// 
      /// Locales: zh, en
      static let address_UNAVAILABLITY = Rswift.StringResource(key: "ADDRESS_UNAVAILABLITY", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入简介
      /// 
      /// Locales: zh, en
      static let post_no_des = Rswift.StringResource(key: "post_no_des", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 请输入邮箱地址
      /// 
      /// Locales: zh, en
      static let common_EMPTY_EMAIL = Rswift.StringResource(key: "COMMON_EMPTY_EMAIL", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 账号退出成功
      /// 
      /// Locales: zh, en
      static let delete_SUCCEED = Rswift.StringResource(key: "DELETE_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 账户二维码
      /// 
      /// Locales: zh, en
      static let common_account_qrcode = Rswift.StringResource(key: "common_account_qrcode", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 账户地址
      /// 
      /// Locales: zh, en
      static let common_account_address = Rswift.StringResource(key: "common_account_address", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 账户备份
      /// 
      /// Locales: zh, en
      static let account_backup = Rswift.StringResource(key: "account_backup", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 货币单位
      /// 
      /// Locales: zh, en
      static let set_CURRENCY_TITLE = Rswift.StringResource(key: "SET_CURRENCY_TITLE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 货币单位切换成功
      /// 
      /// Locales: zh, en
      static let switch_CURRENCY_SUCCEED = Rswift.StringResource(key: "SWITCH_CURRENCY_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 资产
      /// 
      /// Locales: zh, en
      static let main_FUNDS = Rswift.StringResource(key: "MAIN_FUNDS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 资产名称
      /// 
      /// Locales: zh, en
      static let fund_NAME = Rswift.StringResource(key: "FUND_NAME", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 转发
      /// 
      /// Locales: zh, en
      static let common_transimit = Rswift.StringResource(key: "common_transimit", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 转帐地址
      /// 
      /// Locales: zh, en
      static let transfor_ADDRESS = Rswift.StringResource(key: "TRANSFOR_ADDRESS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 转账
      /// 
      /// Locales: zh, en
      static let main_TRANSFOR = Rswift.StringResource(key: "MAIN_TRANSFOR", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 转账信息确认
      /// 
      /// Locales: zh, en
      static let payment_DETERMINE = Rswift.StringResource(key: "PAYMENT_DETERMINE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 转账成功
      /// 
      /// Locales: zh, en
      static let transfor_SUCCEED = Rswift.StringResource(key: "TRANSFOR_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 转账成功 请核对目标地址的入账情况
      /// 
      /// Locales: zh, en
      static let test_PAYMNT_SUCCEED = Rswift.StringResource(key: "TEST_PAYMNT_SUCCEED", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 转账时间
      /// 
      /// Locales: zh, en
      static let payment_TIME = Rswift.StringResource(key: "PAYMENT_TIME", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 转账金额
      /// 
      /// Locales: zh, en
      static let transfor_VALUE = Rswift.StringResource(key: "TRANSFOR_VALUE", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入 Keystore 文本
      /// 
      /// Locales: zh, en
      static let input_KEYSTORE_TEXT = Rswift.StringResource(key: "INPUT_KEYSTORE_TEXT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入12个助记词
      /// 
      /// Locales: zh, en
      static let mnemonic_SUB_Holder = Rswift.StringResource(key: "MNEMONIC_SUB_Holder", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入圈子名称(20字符内)
      /// 
      /// Locales: zh, en
      static let cycle_creat_title_tip = Rswift.StringResource(key: "cycle_creat_title_tip", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入密码
      /// 
      /// Locales: zh, en
      static let setting_PWD = Rswift.StringResource(key: "SETTING_PWD", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入或粘贴Keystore文本, 并提供对应的钱包地址密码。
      /// 
      /// Locales: zh, en
      static let keystore_SUB_CONTENT = Rswift.StringResource(key: "KEYSTORE_SUB_CONTENT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入或选择转账地址
      /// 
      /// Locales: zh, en
      static let transfor_ADDRESS_HODER = Rswift.StringResource(key: "TRANSFOR_ADDRESS_HODER", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入有误
      /// 
      /// Locales: zh, en
      static let common_INPUT_ERROR = Rswift.StringResource(key: "COMMON_INPUT_ERROR", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入标签名称
      /// 
      /// Locales: zh, en
      static let notice_addTags = Rswift.StringResource(key: "notice_addTags", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入标签名称（最多24个字符）
      /// 
      /// Locales: zh, en
      static let notice_addTags_limit = Rswift.StringResource(key: "notice_addTags_limit", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入用户名
      /// 
      /// Locales: zh, en
      static let built_input_username = Rswift.StringResource(key: "built_input_username", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入简介(200字符内)
      /// 
      /// Locales: zh, en
      static let cycle_creat_des_tip = Rswift.StringResource(key: "cycle_creat_des_tip", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 输入评论内容
      /// 
      /// Locales: zh, en
      static let notice_empty_comment = Rswift.StringResource(key: "notice_empty_comment", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 还没有发布内容
      /// 
      /// Locales: zh, en
      static let cycle_no_content = Rswift.StringResource(key: "cycle_no_content", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 还没有评论 快来评论获取PST
      /// 
      /// Locales: zh, en
      static let common_no_comment = Rswift.StringResource(key: "common_no_comment", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 退出圈子
      /// 
      /// Locales: zh, en
      static let cycle_exit = Rswift.StringResource(key: "cycle_exit", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 退出登录
      /// 
      /// Locales: zh, en
      static let quit_Account = Rswift.StringResource(key: "QUIT_Account", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 邮箱
      /// 
      /// Locales: zh, en
      static let common_EMAIL = Rswift.StringResource(key: "COMMON_EMAIL", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 邮箱地址不正确
      /// 
      /// Locales: zh, en
      static let common_ERROR_EMAIL = Rswift.StringResource(key: "COMMON_ERROR_EMAIL", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 重复密码
      /// 
      /// Locales: zh, en
      static let repeat_PWD = Rswift.StringResource(key: "REPEAT_PWD", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 重新登入钱包需要你的Keystore或组记词,请保证你已备份钱包的Keystore或助记词。
      /// 
      /// Locales: zh, en
      static let quit_WALLET_CONTENT = Rswift.StringResource(key: "QUIT_WALLET_CONTENT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 重试
      /// 
      /// Locales: zh, en
      static let comomon_try_again = Rswift.StringResource(key: "comomon_try_again", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 金额不足
      /// 
      /// Locales: zh, en
      static let no_ENOUGH_FUNDS = Rswift.StringResource(key: "NO_ENOUGH_FUNDS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 钱包创建成功
      /// 
      /// Locales: zh, en
      static let succeesd_CREATION_WALLET = Rswift.StringResource(key: "SUCCEESD_CREATION_WALLET", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 钱包地址
      /// 
      /// Locales: zh, en
      static let wallet_ADDRESS = Rswift.StringResource(key: "WALLET_ADDRESS", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 钱包导入成功
      /// 
      /// Locales: zh, en
      static let succeesd_WALLET_IMPORT = Rswift.StringResource(key: "SUCCEESD_WALLET_IMPORT", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 锁定的PST将在1小时后解锁
      /// 
      /// Locales: zh, en
      static let lock_pst_warn = Rswift.StringResource(key: "lock_pst_warn", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 闪光灯不可用
      /// 
      /// Locales: zh, en
      static let scan_ERROE3 = Rswift.StringResource(key: "SCAN_ERROE3", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 限定期
      /// 
      /// Locales: zh, en
      static let lock_pst_time = Rswift.StringResource(key: "lock_pst_time", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 隐私协议
      /// 
      /// Locales: zh, en
      static let pwd_DEAL4 = Rswift.StringResource(key: "PWD_DEAL4", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 首页
      /// 
      /// Locales: zh, en
      static let common_home = Rswift.StringResource(key: "common_home", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      /// zh translation: 高
      /// 
      /// Locales: zh, en
      static let set_level_high = Rswift.StringResource(key: "set_level_high", tableName: "Language", bundle: R.hostingBundle, locales: ["zh", "en"], comment: nil)
      
      /// zh translation:   未备份  
      /// 
      /// Locales: zh, en
      static func have_NOT_BACKUP(_: Void = ()) -> String {
        return NSLocalizedString("HAVE_NOT_BACKUP", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation:  组记词格式错误
      /// 
      /// Locales: zh, en
      static func mnemonic_TEXT_ERROR(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_TEXT_ERROR", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: %d分钟前
      /// 
      /// Locales: zh, en
      static func time_min_ago(_ value1: Int) -> String {
        return String(format: NSLocalizedString("time_min_ago", tableName: "Language", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh translation: %d天前
      /// 
      /// Locales: zh, en
      static func time_day_ago(_ value1: Int) -> String {
        return String(format: NSLocalizedString("time_day_ago", tableName: "Language", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh translation: %d小时前
      /// 
      /// Locales: zh, en
      static func time_hour_ago(_ value1: Int) -> String {
        return String(format: NSLocalizedString("time_hour_ago", tableName: "Language", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh translation: %d年前
      /// 
      /// Locales: zh, en
      static func time_year_ago(_ value1: Int) -> String {
        return String(format: NSLocalizedString("time_year_ago", tableName: "Language", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh translation: %d月前
      /// 
      /// Locales: zh, en
      static func time_mouths_ago(_ value1: Int) -> String {
        return String(format: NSLocalizedString("time_mouths_ago", tableName: "Language", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh translation: + 关注
      /// 
      /// Locales: zh, en
      static func cycle_un_followed(_: Void = ()) -> String {
        return NSLocalizedString("cycle_un_followed", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 1.选择转载许可协议
      /// 
      /// Locales: zh, en
      static func agreeMent_title1(_: Void = ()) -> String {
        return NSLocalizedString("agreeMent_title1", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 100 PST 已放入账户余额中
      /// 
      /// Locales: zh, en
      static func common_pst_notice(_: Void = ()) -> String {
        return NSLocalizedString("common_pst_notice", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 12个助记词
      /// 
      /// Locales: zh, en
      static func mnemonic_SUB_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_SUB_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 2.是否允许您的作品被改编
      /// 
      /// Locales: zh, en
      static func agreeMent_title2(_: Void = ()) -> String {
        return NSLocalizedString("agreeMent_title2", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 3.是否允许商业使用
      /// 
      /// Locales: zh, en
      static func agreeMent_title3(_: Void = ()) -> String {
        return NSLocalizedString("agreeMent_title3", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: DNA
      /// 
      /// Locales: zh, en
      static func common_dna(_: Void = ()) -> String {
        return NSLocalizedString("common_dna", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: DTCP
      /// 
      /// Locales: zh, en
      static func common_dtcp(_: Void = ()) -> String {
        return NSLocalizedString("common_dtcp", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: HP值
      /// 
      /// Locales: zh, en
      static func mine_hp(_: Void = ()) -> String {
        return NSLocalizedString("mine_hp", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: Keystore 导入
      /// 
      /// Locales: zh, en
      static func import_KEYSTORE(_: Void = ()) -> String {
        return NSLocalizedString("IMPORT_KEYSTORE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: Keystore 文本
      /// 
      /// Locales: zh, en
      static func keystore_TEXT(_: Void = ()) -> String {
        return NSLocalizedString("KEYSTORE_TEXT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: Keystore 是加密后的私钥,你可以存储在U盘或者密码管理工具里。存储Keystore时要和钱包密码分开存储, 只要密码强度足够强, 即时Keystore遗失也很难破解而得到你的钱包资产。
      /// 
      /// Locales: zh, en
      static func keystoreback_SUB_CONTENT(_: Void = ()) -> String {
        return NSLocalizedString("KEYSTOREBACK_SUB_CONTENT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: Keystore 格式错误
      /// 
      /// Locales: zh, en
      static func geth_INPUT_ERROR(_: Void = ()) -> String {
        return NSLocalizedString("GETH_INPUT_ERROR", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: Keystore备份
      /// 
      /// Locales: zh, en
      static func keystore_BACKUP(_: Void = ()) -> String {
        return NSLocalizedString("KEYSTORE_BACKUP", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: Keystore备份
      /// 
      /// Locales: zh, en
      static func use_keystore_backup(_: Void = ()) -> String {
        return NSLocalizedString("use_keystore_backup", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: PST
      /// 
      /// Locales: zh, en
      static func common_Pst(_: Void = ()) -> String {
        return NSLocalizedString("common_Pst", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: ⚠️ 注意
      /// 
      /// Locales: zh, en
      static func mnemonic_BACK_NOTICE(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_BACK_NOTICE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 下一步
      /// 
      /// Locales: zh, en
      static func commom_NEXT_STEP(_: Void = ()) -> String {
        return NSLocalizedString("COMMOM_NEXT_STEP", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 下一步
      /// 
      /// Locales: zh, en
      static func common_Nextstep(_: Void = ()) -> String {
        return NSLocalizedString("common_Nextstep", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 与
      /// 
      /// Locales: zh, en
      static func pwd_DEAL3(_: Void = ()) -> String {
        return NSLocalizedString("PWD_DEAL3", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 两次密码不一致
      /// 
      /// Locales: zh, en
      static func different_PWD(_: Void = ()) -> String {
        return NSLocalizedString("DIFFERENT_PWD", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 个人指数
      /// 
      /// Locales: zh, en
      static func mine_grade(_: Void = ()) -> String {
        return NSLocalizedString("mine_grade", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 个字符
      /// 
      /// Locales: zh, en
      static func some_CHARACTER(_: Void = ()) -> String {
        return NSLocalizedString("SOME_CHARACTER", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 中
      /// 
      /// Locales: zh, en
      static func pwd_LEVEL2(_: Void = ()) -> String {
        return NSLocalizedString("PWD_LEVEL2", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 中
      /// 
      /// Locales: zh, en
      static func set_level_middle(_: Void = ()) -> String {
        return NSLocalizedString("set_level_middle", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 交易列表
      /// 
      /// Locales: zh, en
      static func paymnet_LIST(_: Void = ()) -> String {
        return NSLocalizedString("PAYMNET_LIST", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 交易号
      /// 
      /// Locales: zh, en
      static func transcation_INDEX(_: Void = ()) -> String {
        return NSLocalizedString("TRANSCATION_INDEX", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 交易成功
      /// 
      /// Locales: zh, en
      static func payment_STATUS_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("PAYMENT_STATUS_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 交易记录
      /// 
      /// Locales: zh, en
      static func recent_PAYMENT(_: Void = ()) -> String {
        return NSLocalizedString("RECENT_PAYMENT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 交易详情
      /// 
      /// Locales: zh, en
      static func payment_DEATIL(_: Void = ()) -> String {
        return NSLocalizedString("PAYMENT_DEATIL", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 他的内容
      /// 
      /// Locales: zh, en
      static func mine_content_other(_: Void = ()) -> String {
        return NSLocalizedString("mine_content_other", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 他的圈子
      /// 
      /// Locales: zh, en
      static func mine_cycle_other(_: Void = ()) -> String {
        return NSLocalizedString("mine_cycle_other", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 付款地址
      /// 
      /// Locales: zh, en
      static func transfor_FROM_ADDRESS(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_FROM_ADDRESS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 低
      /// 
      /// Locales: zh, en
      static func set_level_low(_: Void = ()) -> String {
        return NSLocalizedString("set_level_low", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 作品信息
      /// 
      /// Locales: zh, en
      static func article_content_info(_: Void = ()) -> String {
        return NSLocalizedString("article_content_info", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 作品区块链地址：
      /// 
      /// Locales: zh, en
      static func article_blockChain_address(_: Void = ()) -> String {
        return NSLocalizedString("article_blockChain_address", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 作者
      /// 
      /// Locales: zh, en
      static func common_author(_: Void = ()) -> String {
        return NSLocalizedString("common_author", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 你的转账金额超过100ETH，鉴于区块链交易的不可逆性，我们为你生成0.000001ETH的小额转账信息，以测试目标地址的正确性。
      /// 
      /// Locales: zh, en
      static func test_PAYMNT_WARN(_: Void = ()) -> String {
        return NSLocalizedString("TEST_PAYMNT_WARN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 你还没有联系人
      /// 
      /// Locales: zh, en
      static func empty_COMTACTLIST(_: Void = ()) -> String {
        return NSLocalizedString("EMPTY_COMTACTLIST", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 使用助记词备份
      /// 
      /// Locales: zh, en
      static func use_nmonnic_backup(_: Void = ()) -> String {
        return NSLocalizedString("use_nmonnic_backup", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 使用帮助
      /// 
      /// Locales: zh, en
      static func set_HEPLER_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("SET_HEPLER_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 便捷指数：
      /// 
      /// Locales: zh, en
      static func set_convenient_level(_: Void = ()) -> String {
        return NSLocalizedString("set_convenient_level", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 修改
      /// 
      /// Locales: zh, en
      static func cycle_update(_: Void = ()) -> String {
        return NSLocalizedString("cycle_update", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 修改名字
      /// 
      /// Locales: zh, en
      static func mine_name_update(_: Void = ()) -> String {
        return NSLocalizedString("mine_name_update", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 免责声明
      /// 
      /// Locales: zh, en
      static func keystore_WARN_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("KEYSTORE_WARN_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 全部
      /// 
      /// Locales: zh, en
      static func common_all(_: Void = ()) -> String {
        return NSLocalizedString("common_all", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 关于我们
      /// 
      /// Locales: zh, en
      static func set_ABOUTUS_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("SET_ABOUTUS_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 关注
      /// 
      /// Locales: zh, en
      static func cycle_follow(_: Void = ()) -> String {
        return NSLocalizedString("cycle_follow", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 内容
      /// 
      /// Locales: zh, en
      static func cycle_content(_: Void = ()) -> String {
        return NSLocalizedString("cycle_content", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 内容
      /// 
      /// Locales: zh, en
      static func post_content_place(_: Void = ()) -> String {
        return NSLocalizedString("post_content_place", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 冻结
      /// 
      /// Locales: zh, en
      static func value_pst_locked(_: Void = ()) -> String {
        return NSLocalizedString("value_pst_locked", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 刚刚
      /// 
      /// Locales: zh, en
      static func time_just_ago(_: Void = ()) -> String {
        return NSLocalizedString("time_just_ago", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建
      /// 
      /// Locales: zh, en
      static func cycle_create(_: Void = ()) -> String {
        return NSLocalizedString("cycle_create", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建圈子
      /// 
      /// Locales: zh, en
      static func cycle_creat_title(_: Void = ()) -> String {
        return NSLocalizedString("cycle_creat_title", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建圈子 获得更多PST
      /// 
      /// Locales: zh, en
      static func create_cicrcle_prompt(_: Void = ()) -> String {
        return NSLocalizedString("create_cicrcle_prompt", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建圈子将锁定
      /// 
      /// Locales: zh, en
      static func cycle_create_lock(_: Void = ()) -> String {
        return NSLocalizedString("cycle_create_lock", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建用户名
      /// 
      /// Locales: zh, en
      static func built_create_username(_: Void = ()) -> String {
        return NSLocalizedString("built_create_username", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建者
      /// 
      /// Locales: zh, en
      static func cycle_founder(_: Void = ()) -> String {
        return NSLocalizedString("cycle_founder", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建账号
      /// 
      /// Locales: zh, en
      static func built_WALLET(_: Void = ()) -> String {
        return NSLocalizedString("BUILT_WALLET", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建账户
      /// 
      /// Locales: zh, en
      static func common_create_account(_: Void = ()) -> String {
        return NSLocalizedString("common_create_account", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 创建钱包即代表同意TokenUp
      /// 
      /// Locales: zh, en
      static func pwd_DEAL1(_: Void = ()) -> String {
        return NSLocalizedString("PWD_DEAL1", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 删除
      /// 
      /// Locales: zh, en
      static func common_DELETE(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_DELETE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 删除
      /// 
      /// Locales: zh, en
      static func common_Delete(_: Void = ()) -> String {
        return NSLocalizedString("common_Delete", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 加入
      /// 
      /// Locales: zh, en
      static func title_cicrcle_added(_: Void = ()) -> String {
        return NSLocalizedString("title_cicrcle_added", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 加入圈子将锁定
      /// 
      /// Locales: zh, en
      static func cycle_join_lock(_: Void = ()) -> String {
        return NSLocalizedString("cycle_join_lock", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 加入该圈子
      /// 
      /// Locales: zh, en
      static func cycle_join(_: Void = ()) -> String {
        return NSLocalizedString("cycle_join", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 加入该圈子才能操作，是否申请加入?
      /// 
      /// Locales: zh, en
      static func need_join_circle(_: Void = ()) -> String {
        return NSLocalizedString("need_join_circle", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 加载中
      /// 
      /// Locales: zh, en
      static func common_LOAD(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_LOAD", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 加载中
      /// 
      /// Locales: zh, en
      static func common_Load(_: Void = ()) -> String {
        return NSLocalizedString("common_Load", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 助记词备份
      /// 
      /// Locales: zh, en
      static func mnemonic_BACK_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_BACK_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 助记词备份完成
      /// 
      /// Locales: zh, en
      static func mnemonic_WARN_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_WARN_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 助记词备份完成后将会从钱包备份项移除，请确保已安全保存助记词，助记词一旦遗失将不能找回！
      /// 
      /// Locales: zh, en
      static func mnemonic_WARN_CONTENT(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_WARN_CONTENT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 助记词导入
      /// 
      /// Locales: zh, en
      static func import_MNEMONIC(_: Void = ()) -> String {
        return NSLocalizedString("IMPORT_MNEMONIC", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 区块
      /// 
      /// Locales: zh, en
      static func transcation_BLOCK(_: Void = ()) -> String {
        return NSLocalizedString("TRANSCATION_BLOCK", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 区块链信息
      /// 
      /// Locales: zh, en
      static func blockchain_info(_: Void = ()) -> String {
        return NSLocalizedString("blockchain_info", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 区块链地址
      /// 
      /// Locales: zh, en
      static func blockchain_address(_: Void = ()) -> String {
        return NSLocalizedString("blockchain_address", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 区块链钱包是基于密码学的去中心化账号系统。任何意外发生将导致资产丢失，所以我们建议你及时做好钱包的备份。
      /// 
      /// Locales: zh, en
      static func wallet_BACKUP_WARN(_: Void = ()) -> String {
        return NSLocalizedString("WALLET_BACKUP_WARN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 原创
      /// 
      /// Locales: zh, en
      static func common_orignal_author(_: Void = ()) -> String {
        return NSLocalizedString("common_orignal_author", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 去充值
      /// 
      /// Locales: zh, en
      static func go_to_charge(_: Void = ()) -> String {
        return NSLocalizedString("go_to_charge", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 去创建
      /// 
      /// Locales: zh, en
      static func go_to_create(_: Void = ()) -> String {
        return NSLocalizedString("go_to_create", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 去发布
      /// 
      /// Locales: zh, en
      static func cycle_go_write(_: Void = ()) -> String {
        return NSLocalizedString("cycle_go_write", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 去发布内容
      /// 
      /// Locales: zh, en
      static func cycle_write_article(_: Void = ()) -> String {
        return NSLocalizedString("cycle_write_article", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 去圈子
      /// 
      /// Locales: zh, en
      static func cycle_goto(_: Void = ()) -> String {
        return NSLocalizedString("cycle_goto", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 反馈问题已提交
      /// 
      /// Locales: zh, en
      static func feedback_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("FEEDBACK_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 发布
      /// 
      /// Locales: zh, en
      static func common_Post(_: Void = ()) -> String {
        return NSLocalizedString("common_Post", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 发布一条内容将锁定
      /// 
      /// Locales: zh, en
      static func post_article_title(_: Void = ()) -> String {
        return NSLocalizedString("post_article_title", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 发布到圈子
      /// 
      /// Locales: zh, en
      static func post_to_circle(_: Void = ()) -> String {
        return NSLocalizedString("post_to_circle", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 发布时间
      /// 
      /// Locales: zh, en
      static func common_publish_time(_: Void = ()) -> String {
        return NSLocalizedString("common_publish_time", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 发布首条内容可获得PST
      /// 
      /// Locales: zh, en
      static func cycle_no_content_tip(_: Void = ()) -> String {
        return NSLocalizedString("cycle_no_content_tip", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 发现
      /// 
      /// Locales: zh, en
      static func cycle_discover(_: Void = ()) -> String {
        return NSLocalizedString("cycle_discover", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 发送方地址
      /// 
      /// Locales: zh, en
      static func set_MONEY_ADDRESS(_: Void = ()) -> String {
        return NSLocalizedString("SET_MONEY_ADDRESS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 取消
      /// 
      /// Locales: zh, en
      static func cancel_BUTTON(_: Void = ()) -> String {
        return NSLocalizedString("CANCEL_BUTTON", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 取消
      /// 
      /// Locales: zh, en
      static func common_Cancel(_: Void = ()) -> String {
        return NSLocalizedString("common_Cancel", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 取消关注
      /// 
      /// Locales: zh, en
      static func cycle_cancel_follow(_: Void = ()) -> String {
        return NSLocalizedString("cycle_cancel_follow", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 可在设置中进行备份,
      /// 
      /// Locales: zh, en
      static func backup_WARN(_: Void = ()) -> String {
        return NSLocalizedString("BACKUP_WARN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 可用(PST)
      /// 
      /// Locales: zh, en
      static func record_available(_: Void = ()) -> String {
        return NSLocalizedString("record_available", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 可用余额
      /// 
      /// Locales: zh, en
      static func aviable_MONEY(_: Void = ()) -> String {
        return NSLocalizedString("AVIABLE_MONEY", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 可用余额不足
      /// 
      /// Locales: zh, en
      static func no_ENOUGH_MONEY(_: Void = ()) -> String {
        return NSLocalizedString("NO_ENOUGH_MONEY", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 名
      /// 
      /// Locales: zh, en
      static func contact_NAME(_: Void = ()) -> String {
        return NSLocalizedString("CONTACT_NAME", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 否
      /// 
      /// Locales: zh, en
      static func common_no(_: Void = ()) -> String {
        return NSLocalizedString("common_no", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 商业许可协议
      /// 
      /// Locales: zh, en
      static func agreeMent_select2(_: Void = ()) -> String {
        return NSLocalizedString("agreeMent_select2", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 圈子
      /// 
      /// Locales: zh, en
      static func cycle_title(_: Void = ()) -> String {
        return NSLocalizedString("cycle_title", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 圈子创建成功!
      /// 
      /// Locales: zh, en
      static func cycle_creat_sucess(_: Void = ()) -> String {
        return NSLocalizedString("cycle_creat_sucess", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 备份
      /// 
      /// Locales: zh, en
      static func set_backup_title(_: Void = ()) -> String {
        return NSLocalizedString("set_backup_title", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 备注
      /// 
      /// Locales: zh, en
      static func transfor_INFO(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_INFO", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 备注
      /// 
      /// Locales: zh, en
      static func transfor_INFO_TEXT(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_INFO_TEXT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 姓名
      /// 
      /// Locales: zh, en
      static func contact_SURE_NAME(_: Void = ()) -> String {
        return NSLocalizedString("CONTACT_SURE_NAME", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 安全指数：
      /// 
      /// Locales: zh, en
      static func set_safe_level(_: Void = ()) -> String {
        return NSLocalizedString("set_safe_level", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 完成
      /// 
      /// Locales: zh, en
      static func confirm_BUTTON(_: Void = ()) -> String {
        return NSLocalizedString("CONFIRM_BUTTON", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 完成
      /// 
      /// Locales: zh, en
      static func finish_BUTTON(_: Void = ()) -> String {
        return NSLocalizedString("FINISH_BUTTON", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 密码错误
      /// 
      /// Locales: zh, en
      static func pwd_ERROR(_: Void = ()) -> String {
        return NSLocalizedString("PWD_ERROR", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 密钥是确认您身份的唯一信息，是一串复杂的字符串，为了方便您的使用，您只需要在操作中使用您设置的密钥保护码即可。  为了保护账户安全请立即备份私钥，以便账户异常后重新导入。
      /// 
      /// Locales: zh, en
      static func set_backup_content(_: Void = ()) -> String {
        return NSLocalizedString("set_backup_content", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 导入账号
      /// 
      /// Locales: zh, en
      static func restore_WALLET(_: Void = ()) -> String {
        return NSLocalizedString("RESTORE_WALLET", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 导入钱包
      /// 
      /// Locales: zh, en
      static func builtwalleT(_: Void = ()) -> String {
        return NSLocalizedString("BUILTWALLET", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 导出密钥备份
      /// 
      /// Locales: zh, en
      static func use_privatekey_backup(_: Void = ()) -> String {
        return NSLocalizedString("use_privatekey_backup", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 将取景框对准二维码，即可自动扫描
      /// 
      /// Locales: zh, en
      static func scan_PROMPT(_: Void = ()) -> String {
        return NSLocalizedString("SCAN_PROMPT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 小额试转
      /// 
      /// Locales: zh, en
      static func test_PAYMNT(_: Void = ()) -> String {
        return NSLocalizedString("TEST_PAYMNT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 小额试转提醒
      /// 
      /// Locales: zh, en
      static func test_PAYMNT_PROMPT(_: Void = ()) -> String {
        return NSLocalizedString("TEST_PAYMNT_PROMPT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 已关注
      /// 
      /// Locales: zh, en
      static func cycle_followed(_: Void = ()) -> String {
        return NSLocalizedString("cycle_followed", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 已加入
      /// 
      /// Locales: zh, en
      static func cycle_my_joined(_: Void = ()) -> String {
        return NSLocalizedString("cycle_my_joined", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 已发布%d条内容
      /// 
      /// Locales: zh, en
      static func cycle_content_num(_ value1: Int) -> String {
        return String(format: NSLocalizedString("cycle_content_num", tableName: "Language", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh translation: 已复制到剪切板
      /// 
      /// Locales: zh, en
      static func paste_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("PASTE_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 已点赞
      /// 
      /// Locales: zh, en
      static func notice_liked(_: Void = ()) -> String {
        return NSLocalizedString("notice_liked", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 已申请加入圈子, 待审核完成后可进行操作。
      /// 
      /// Locales: zh, en
      static func article_join_circle(_: Void = ()) -> String {
        return NSLocalizedString("article_join_circle", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 已输入
      /// 
      /// Locales: zh, en
      static func text_ENTERED(_: Void = ()) -> String {
        return NSLocalizedString("TEXT_ENTERED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 币种
      /// 
      /// Locales: zh, en
      static func select_CURRENCY(_: Void = ()) -> String {
        return NSLocalizedString("SELECT_CURRENCY", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 币种选择
      /// 
      /// Locales: zh, en
      static func no_SELECT_COIN(_: Void = ()) -> String {
        return NSLocalizedString("NO_SELECT_COIN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 常用标签
      /// 
      /// Locales: zh, en
      static func normal_use_tags(_: Void = ()) -> String {
        return NSLocalizedString("normal_use_tags", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 建立你的账户  关注你感兴趣的内容
      /// 
      /// Locales: zh, en
      static func common_create_prompt(_: Void = ()) -> String {
        return NSLocalizedString("common_create_prompt", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 建立你的账户  立刻获取奖励
      /// 
      /// Locales: zh, en
      static func common_create_prompt2(_: Void = ()) -> String {
        return NSLocalizedString("common_create_prompt2", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 开始导入
      /// 
      /// Locales: zh, en
      static func begin_IMPORT(_: Void = ()) -> String {
        return NSLocalizedString("BEGIN_IMPORT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 弱
      /// 
      /// Locales: zh, en
      static func pwd_LEVEL1(_: Void = ()) -> String {
        return NSLocalizedString("PWD_LEVEL1", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 强
      /// 
      /// Locales: zh, en
      static func pwd_LEVEL3(_: Void = ()) -> String {
        return NSLocalizedString("PWD_LEVEL3", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 当你的HP值过低时，你的操作将不对内容的评价产生影响
      /// 
      /// Locales: zh, en
      static func notice_hp_prompt(_: Void = ()) -> String {
        return NSLocalizedString("notice_hp_prompt", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 当前HP: 
      /// 
      /// Locales: zh, en
      static func notice_current_hp(_: Void = ()) -> String {
        return NSLocalizedString("notice_current_hp", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 当前PST余额不足
      /// 
      /// Locales: zh, en
      static func no_pst_warn(_: Void = ()) -> String {
        return NSLocalizedString("no_pst_warn", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 当前可用PST: 
      /// 
      /// Locales: zh, en
      static func post_transfor_pst(_: Void = ()) -> String {
        return NSLocalizedString("post_transfor_pst", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 快
      /// 
      /// Locales: zh, en
      static func commom_FAST(_: Void = ()) -> String {
        return NSLocalizedString("COMMOM_FAST", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 快速查看
      /// 
      /// Locales: zh, en
      static func common_quick_look(_: Void = ()) -> String {
        return NSLocalizedString("common_quick_look", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 总交易量
      /// 
      /// Locales: zh, en
      static func common_ALL_TRANSCATION(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_ALL_TRANSCATION", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 总资产
      /// 
      /// Locales: zh, en
      static func all_FUNDS(_: Void = ()) -> String {
        return NSLocalizedString("ALL_FUNDS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 意见反馈
      /// 
      /// Locales: zh, en
      static func set_SUGGES_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("SET_SUGGES_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 慢
      /// 
      /// Locales: zh, en
      static func commom_SLOW(_: Void = ()) -> String {
        return NSLocalizedString("COMMOM_SLOW", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 成功转发到圈子
      /// 
      /// Locales: zh, en
      static func share_to_circle_success(_: Void = ()) -> String {
        return NSLocalizedString("share_to_circle_success", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 成员
      /// 
      /// Locales: zh, en
      static func cycle_member(_: Void = ()) -> String {
        return NSLocalizedString("cycle_member", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 成员数
      /// 
      /// Locales: zh, en
      static func cycle_member_num(_: Void = ()) -> String {
        return NSLocalizedString("cycle_member_num", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 我创建的
      /// 
      /// Locales: zh, en
      static func cycle_my_created(_: Void = ()) -> String {
        return NSLocalizedString("cycle_my_created", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 我已理解并同意服务条款与隐私协议
      /// 
      /// Locales: zh, en
      static func agreement_WARN(_: Void = ()) -> String {
        return NSLocalizedString("AGREEMENT_WARN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 我的Token总额 (PST)
      /// 
      /// Locales: zh, en
      static func record_mine(_: Void = ()) -> String {
        return NSLocalizedString("record_mine", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 我的内容
      /// 
      /// Locales: zh, en
      static func mine_content(_: Void = ()) -> String {
        return NSLocalizedString("mine_content", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 我的圈子
      /// 
      /// Locales: zh, en
      static func mine_cycle(_: Void = ()) -> String {
        return NSLocalizedString("mine_cycle", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 扫一扫
      /// 
      /// Locales: zh, en
      static func main_SCAN(_: Void = ()) -> String {
        return NSLocalizedString("MAIN_SCAN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 扫描二维码，向我付款
      /// 
      /// Locales: zh, en
      static func getmoney_PROMPT(_: Void = ()) -> String {
        return NSLocalizedString("GETMONEY_PROMPT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 指纹设置
      /// 
      /// Locales: zh, en
      static func set_FINGERPRINT_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("SET_FINGERPRINT_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 换一批
      /// 
      /// Locales: zh, en
      static func common_change_data(_: Void = ()) -> String {
        return NSLocalizedString("common_change_data", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 排版协议
      /// 
      /// Locales: zh, en
      static func article_format_agressment(_: Void = ()) -> String {
        return NSLocalizedString("article_format_agressment", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 提交
      /// 
      /// Locales: zh, en
      static func common_SUBMIT(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_SUBMIT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 提示
      /// 
      /// Locales: zh, en
      static func common_NOTICE(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_NOTICE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 摄像头不可用
      /// 
      /// Locales: zh, en
      static func scan_ERROE2(_: Void = ()) -> String {
        return NSLocalizedString("SCAN_ERROE2", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 操作成功,可在加入列表查看状态。
      /// 
      /// Locales: zh, en
      static func join_circle_tip(_: Void = ()) -> String {
        return NSLocalizedString("join_circle_tip", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 支付币种
      /// 
      /// Locales: zh, en
      static func transfor_COIN(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_COIN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 收款
      /// 
      /// Locales: zh, en
      static func main_GETMONEY(_: Void = ()) -> String {
        return NSLocalizedString("MAIN_GETMONEY", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 收款地址
      /// 
      /// Locales: zh, en
      static func getmoney_ADDRESS(_: Void = ()) -> String {
        return NSLocalizedString("GETMONEY_ADDRESS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 收款方地址
      /// 
      /// Locales: zh, en
      static func get_MONEY_ADDRESS(_: Void = ()) -> String {
        return NSLocalizedString("GET_MONEY_ADDRESS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 收款金额
      /// 
      /// Locales: zh, en
      static func transfor_GET_VALUE(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_GET_VALUE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 数字签名
      /// 
      /// Locales: zh, en
      static func common_signature(_: Void = ()) -> String {
        return NSLocalizedString("common_signature", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 文章哈希
      /// 
      /// Locales: zh, en
      static func article_hash(_: Void = ()) -> String {
        return NSLocalizedString("article_hash", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 新建联系人
      /// 
      /// Locales: zh, en
      static func add_CONTACT(_: Void = ()) -> String {
        return NSLocalizedString("ADD_CONTACT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 无
      /// 
      /// Locales: zh, en
      static func transfor_INFO_NONE(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_INFO_NONE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 无任何交易记录
      /// 
      /// Locales: zh, en
      static func no_PAYMENT(_: Void = ()) -> String {
        return NSLocalizedString("NO_PAYMENT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 无法识别
      /// 
      /// Locales: zh, en
      static func scan_ERROE1(_: Void = ()) -> String {
        return NSLocalizedString("SCAN_ERROE1", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 昨日(PST)
      /// 
      /// Locales: zh, en
      static func record_yesterday(_: Void = ()) -> String {
        return NSLocalizedString("record_yesterday", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 昨日Token发放数 %0.2f
      /// 
      /// Locales: zh, en
      static func record_yesterday2(_ value1: Double) -> String {
        return String(format: NSLocalizedString("record_yesterday2", tableName: "Language", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh translation: 是
      /// 
      /// Locales: zh, en
      static func common_yes(_: Void = ()) -> String {
        return NSLocalizedString("common_yes", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 是,只要他人以相同方式共享
      /// 
      /// Locales: zh, en
      static func agreeMent_select3(_: Void = ()) -> String {
        return NSLocalizedString("agreeMent_select3", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 暂无关注
      /// 
      /// Locales: zh, en
      static func common_no_subscription(_: Void = ()) -> String {
        return NSLocalizedString("common_no_subscription", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 暂无数据
      /// 
      /// Locales: zh, en
      static func common_no_content(_: Void = ()) -> String {
        return NSLocalizedString("common_no_content", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 暂无更多数据
      /// 
      /// Locales: zh, en
      static func common_no_more_data(_: Void = ()) -> String {
        return NSLocalizedString("common_no_more_data", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 暂无相应汇率信息
      /// 
      /// Locales: zh, en
      static func no_RATIO_INFO(_: Void = ()) -> String {
        return NSLocalizedString("NO_RATIO_INFO", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 更改协议 >
      /// 
      /// Locales: zh, en
      static func article_change_agree(_: Void = ()) -> String {
        return NSLocalizedString("article_change_agree", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 最多24个字符
      /// 
      /// Locales: zh, en
      static func notice_count_limit(_: Void = ()) -> String {
        return NSLocalizedString("notice_count_limit", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 服务条款
      /// 
      /// Locales: zh, en
      static func pwd_DEAL2(_: Void = ()) -> String {
        return NSLocalizedString("PWD_DEAL2", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 未知
      /// 
      /// Locales: zh, en
      static func common_unknown(_: Void = ()) -> String {
        return NSLocalizedString("common_unknown", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 未知网络错误
      /// 
      /// Locales: zh, en
      static func common_unknow_network(_: Void = ()) -> String {
        return NSLocalizedString("common_unknow_network", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 未输入任何内容
      /// 
      /// Locales: zh, en
      static func nothing_INPUT(_: Void = ()) -> String {
        return NSLocalizedString("NOTHING_INPUT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 未选中任何圈子
      /// 
      /// Locales: zh, en
      static func select_zero_circle(_: Void = ()) -> String {
        return NSLocalizedString("select_zero_circle", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 本作品采用 <red>知识共享署名-相同方式共享 4.0 国际许可协议</red> 进行许可。<gray>  ● 允许复制、发行、展览和表演作品，但必须按照指定的方式对作品进行署名  ● 允许复制、发行、展览和表演作品，包括出于商业目的进行上述活动  ● 允许复制、发行演绎作品，但演绎作品必须采用与本协议相同或兼容的协议进行许可</gray>  <black>提示：版权协议不包括文章中的图片</black>
      /// 
      /// Locales: zh, en
      static func article_content_agree(_: Void = ()) -> String {
        return NSLocalizedString("article_content_agree", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 本次操作将消耗HP
      /// 
      /// Locales: zh, en
      static func post_usdHp_warn(_: Void = ()) -> String {
        return NSLocalizedString("post_usdHp_warn", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 查看作品详细信息
      /// 
      /// Locales: zh, en
      static func look_article_info(_: Void = ()) -> String {
        return NSLocalizedString("look_article_info", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 查看更多
      /// 
      /// Locales: zh, en
      static func cycle_des_more(_: Void = ()) -> String {
        return NSLocalizedString("cycle_des_more", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 标签
      /// 
      /// Locales: zh, en
      static func common_tags(_: Void = ()) -> String {
        return NSLocalizedString("common_tags", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 标题
      /// 
      /// Locales: zh, en
      static func post_title_place(_: Void = ()) -> String {
        return NSLocalizedString("post_title_place", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 核对助记词
      /// 
      /// Locales: zh, en
      static func check_MNEMONIC_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("CHECK_MNEMONIC_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 正确输入您钱包的12个组记词, 词与词之间用空格表示, 并设置新的钱包密码。
      /// 
      /// Locales: zh, en
      static func mnemonic_TEXT_WARN(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_TEXT_WARN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 此联系人已存在，无需添加。
      /// 
      /// Locales: zh, en
      static func exisit_CONTACT(_: Void = ()) -> String {
        return NSLocalizedString("EXISIT_CONTACT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 注册时间
      /// 
      /// Locales: zh, en
      static func common_register_time(_: Void = ()) -> String {
        return NSLocalizedString("common_register_time", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 注意
      /// 
      /// Locales: zh, en
      static func commom_PRPMPT(_: Void = ()) -> String {
        return NSLocalizedString("COMMOM_PRPMPT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 注意
      /// 
      /// Locales: zh, en
      static func common_Prpmpt(_: Void = ()) -> String {
        return NSLocalizedString("common_Prpmpt", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 添加成功
      /// 
      /// Locales: zh, en
      static func add_CONTACT_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("ADD_CONTACT_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 添加标签
      /// 
      /// Locales: zh, en
      static func common_add_tags(_: Void = ()) -> String {
        return NSLocalizedString("common_add_tags", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 点击或下拉刷新
      /// 
      /// Locales: zh, en
      static func common_pull_load(_: Void = ()) -> String {
        return NSLocalizedString("common_pull_load", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 点击账号可复制
      /// 
      /// Locales: zh, en
      static func click_PASTE(_: Void = ()) -> String {
        return NSLocalizedString("CLICK_PASTE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 点赞
      /// 
      /// Locales: zh, en
      static func common_like(_: Void = ()) -> String {
        return NSLocalizedString("common_like", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 点赞成功
      /// 
      /// Locales: zh, en
      static func notice_like_success(_: Void = ()) -> String {
        return NSLocalizedString("notice_like_success", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 版本号
      /// 
      /// Locales: zh, en
      static func common_APP_VERSION(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_APP_VERSION", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 版权协议
      /// 
      /// Locales: zh, en
      static func agreeMent_nav_title(_: Void = ()) -> String {
        return NSLocalizedString("agreeMent_nav_title", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 用户名
      /// 
      /// Locales: zh, en
      static func common_username(_: Void = ()) -> String {
        return NSLocalizedString("common_username", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 用户名不合法
      /// 
      /// Locales: zh, en
      static func username_formated_error(_: Void = ()) -> String {
        return NSLocalizedString("username_formated_error", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 用户名至多30个字符，支持英文、数字，不支持重复的用户名。
      /// 
      /// Locales: zh, en
      static func built_username_limit(_: Void = ()) -> String {
        return NSLocalizedString("built_username_limit", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 知识共享许可协议
      /// 
      /// Locales: zh, en
      static func agreeMent_select1(_: Void = ()) -> String {
        return NSLocalizedString("agreeMent_select1", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 矿工费用
      /// 
      /// Locales: zh, en
      static func pow_MONEY(_: Void = ()) -> String {
        return NSLocalizedString("POW_MONEY", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 确定
      /// 
      /// Locales: zh, en
      static func common_Confirm(_: Void = ()) -> String {
        return NSLocalizedString("common_Confirm", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 确定创建
      /// 
      /// Locales: zh, en
      static func cycle_creat_confirm(_: Void = ()) -> String {
        return NSLocalizedString("cycle_creat_confirm", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 确定要去退出%@吗？
      /// 
      /// Locales: zh, en
      static func cycle_exit_tip(_ value1: String) -> String {
        return String(format: NSLocalizedString("cycle_exit_tip", tableName: "Language", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh translation: 确定要取消对圈子的关注吗？
      /// 
      /// Locales: zh, en
      static func cycle_unfollow_tip(_: Void = ()) -> String {
        return NSLocalizedString("cycle_unfollow_tip", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 确定退出钱包?
      /// 
      /// Locales: zh, en
      static func quit_WALLET_Title(_: Void = ()) -> String {
        return NSLocalizedString("QUIT_WALLET_Title", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 确认中
      /// 
      /// Locales: zh, en
      static func connect_PENDING(_: Void = ()) -> String {
        return NSLocalizedString("CONNECT_PENDING", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 确认中
      /// 
      /// Locales: zh, en
      static func post_to_auditting(_: Void = ()) -> String {
        return NSLocalizedString("post_to_auditting", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 私钥
      /// 
      /// Locales: zh, en
      static func import_PRIVATYKE(_: Void = ()) -> String {
        return NSLocalizedString("IMPORT_PRIVATYKE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 立即备份
      /// 
      /// Locales: zh, en
      static func backup_NOW(_: Void = ()) -> String {
        return NSLocalizedString("BACKUP_NOW", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 笔交易
      /// 
      /// Locales: zh, en
      static func num_OF_PAYMNET(_: Void = ()) -> String {
        return NSLocalizedString("NUM_OF_PAYMNET", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 简介
      /// 
      /// Locales: zh, en
      static func cycle_des(_: Void = ()) -> String {
        return NSLocalizedString("cycle_des", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 编辑
      /// 
      /// Locales: zh, en
      static func common_edit(_: Void = ()) -> String {
        return NSLocalizedString("common_edit", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 网络连接不可用
      /// 
      /// Locales: zh, en
      static func common_network_error(_: Void = ()) -> String {
        return NSLocalizedString("common_network_error", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 网络连接失败
      /// 
      /// Locales: zh, en
      static func connect_SEEVER_ERROR(_: Void = ()) -> String {
        return NSLocalizedString("CONNECT_SEEVER_ERROR", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 联系人
      /// 
      /// Locales: zh, en
      static func main_CONTACT(_: Void = ()) -> String {
        return NSLocalizedString("MAIN_CONTACT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 至少8个字符，请使用使用大小写、数字、字母、字符组合。
      /// 
      /// Locales: zh, en
      static func pwd_LIMIT(_: Void = ()) -> String {
        return NSLocalizedString("PWD_LIMIT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 获取资产失败
      /// 
      /// Locales: zh, en
      static func get_FUNDS_ERROR(_: Void = ()) -> String {
        return NSLocalizedString("GET_FUNDS_ERROR", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 获得PST
      /// 
      /// Locales: zh, en
      static func cycle_no_content_tip2(_: Void = ()) -> String {
        return NSLocalizedString("cycle_no_content_tip2", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 设置
      /// 
      /// Locales: zh, en
      static func setting_PAGE(_: Void = ()) -> String {
        return NSLocalizedString("SETTING_PAGE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 评论
      /// 
      /// Locales: zh, en
      static func common_comment(_: Void = ()) -> String {
        return NSLocalizedString("common_comment", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 评论成功
      /// 
      /// Locales: zh, en
      static func notice_comment_success(_: Void = ()) -> String {
        return NSLocalizedString("notice_comment_success", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 语言切换成功
      /// 
      /// Locales: zh, en
      static func switch_LANGUAGE_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("SWITCH_LANGUAGE_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 语言设置
      /// 
      /// Locales: zh, en
      static func set_LANGUAGE_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("SET_LANGUAGE_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请填写反馈问题
      /// 
      /// Locales: zh, en
      static func feedback_NO_CONTENT(_: Void = ()) -> String {
        return NSLocalizedString("FEEDBACK_NO_CONTENT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请填写转入地址
      /// 
      /// Locales: zh, en
      static func transfor_NO_ADDRESS(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_NO_ADDRESS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请填写转出金额
      /// 
      /// Locales: zh, en
      static func no_SELECT_TRANSFOR_VALUE(_: Void = ()) -> String {
        return NSLocalizedString("NO_SELECT_TRANSFOR_VALUE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请按顺序通过手记方式记下您的12个助记词, 助记词非常重要, 任何人得到您的助记词就得到了您资产的所有权,所以请将助记词保存到安全的地方。
      /// 
      /// Locales: zh, en
      static func mnemonic_BACK_WARN(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_BACK_WARN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请描述您遇到的问题以便我们提供更好的帮助
      /// 
      /// Locales: zh, en
      static func feed_BACK_PROMPT(_: Void = ()) -> String {
        return NSLocalizedString("FEED_BACK_PROMPT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请确保钱包已备份至安全的地方， TokenUp将不承担任何钱包丢失，被盗，忘记密码等产生的资产损失！
      /// 
      /// Locales: zh, en
      static func keystore_WARN_CONTENT(_: Void = ()) -> String {
        return NSLocalizedString("KEYSTORE_WARN_CONTENT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请设置密码, 并及时做好本地备份, 它是您使用整个Primas重要操作的通行凭证。
      /// 
      /// Locales: zh, en
      static func built_WALLET_WARN(_: Void = ()) -> String {
        return NSLocalizedString("BUILT_WALLET_WARN", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入内容
      /// 
      /// Locales: zh, en
      static func post_no_content(_: Void = ()) -> String {
        return NSLocalizedString("post_no_content", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入名字
      /// 
      /// Locales: zh, en
      static func contact_NO_NAME(_: Void = ()) -> String {
        return NSLocalizedString("CONTACT_NO_NAME", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入地址
      /// 
      /// Locales: zh, en
      static func contact_NO_ADDRESS(_: Void = ()) -> String {
        return NSLocalizedString("CONTACT_NO_ADDRESS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入姓氏
      /// 
      /// Locales: zh, en
      static func contact_NO_SURENAME(_: Void = ()) -> String {
        return NSLocalizedString("CONTACT_NO_SURENAME", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入密码
      /// 
      /// Locales: zh, en
      static func input_PWD_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("INPUT_PWD_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入密钥保护码
      /// 
      /// Locales: zh, en
      static func notice_input_pwd(_: Void = ()) -> String {
        return NSLocalizedString("notice_input_pwd", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入标题
      /// 
      /// Locales: zh, en
      static func post_no_title(_: Void = ()) -> String {
        return NSLocalizedString("post_no_title", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入正确的地址
      /// 
      /// Locales: zh, en
      static func address_UNAVAILABLITY(_: Void = ()) -> String {
        return NSLocalizedString("ADDRESS_UNAVAILABLITY", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入简介
      /// 
      /// Locales: zh, en
      static func post_no_des(_: Void = ()) -> String {
        return NSLocalizedString("post_no_des", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 请输入邮箱地址
      /// 
      /// Locales: zh, en
      static func common_EMPTY_EMAIL(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_EMPTY_EMAIL", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 账号退出成功
      /// 
      /// Locales: zh, en
      static func delete_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("DELETE_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 账户二维码
      /// 
      /// Locales: zh, en
      static func common_account_qrcode(_: Void = ()) -> String {
        return NSLocalizedString("common_account_qrcode", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 账户地址
      /// 
      /// Locales: zh, en
      static func common_account_address(_: Void = ()) -> String {
        return NSLocalizedString("common_account_address", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 账户备份
      /// 
      /// Locales: zh, en
      static func account_backup(_: Void = ()) -> String {
        return NSLocalizedString("account_backup", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 货币单位
      /// 
      /// Locales: zh, en
      static func set_CURRENCY_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("SET_CURRENCY_TITLE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 货币单位切换成功
      /// 
      /// Locales: zh, en
      static func switch_CURRENCY_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("SWITCH_CURRENCY_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 资产
      /// 
      /// Locales: zh, en
      static func main_FUNDS(_: Void = ()) -> String {
        return NSLocalizedString("MAIN_FUNDS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 资产名称
      /// 
      /// Locales: zh, en
      static func fund_NAME(_: Void = ()) -> String {
        return NSLocalizedString("FUND_NAME", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 转发
      /// 
      /// Locales: zh, en
      static func common_transimit(_: Void = ()) -> String {
        return NSLocalizedString("common_transimit", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 转帐地址
      /// 
      /// Locales: zh, en
      static func transfor_ADDRESS(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_ADDRESS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 转账
      /// 
      /// Locales: zh, en
      static func main_TRANSFOR(_: Void = ()) -> String {
        return NSLocalizedString("MAIN_TRANSFOR", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 转账信息确认
      /// 
      /// Locales: zh, en
      static func payment_DETERMINE(_: Void = ()) -> String {
        return NSLocalizedString("PAYMENT_DETERMINE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 转账成功
      /// 
      /// Locales: zh, en
      static func transfor_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 转账成功 请核对目标地址的入账情况
      /// 
      /// Locales: zh, en
      static func test_PAYMNT_SUCCEED(_: Void = ()) -> String {
        return NSLocalizedString("TEST_PAYMNT_SUCCEED", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 转账时间
      /// 
      /// Locales: zh, en
      static func payment_TIME(_: Void = ()) -> String {
        return NSLocalizedString("PAYMENT_TIME", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 转账金额
      /// 
      /// Locales: zh, en
      static func transfor_VALUE(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_VALUE", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入 Keystore 文本
      /// 
      /// Locales: zh, en
      static func input_KEYSTORE_TEXT(_: Void = ()) -> String {
        return NSLocalizedString("INPUT_KEYSTORE_TEXT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入12个助记词
      /// 
      /// Locales: zh, en
      static func mnemonic_SUB_Holder(_: Void = ()) -> String {
        return NSLocalizedString("MNEMONIC_SUB_Holder", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入圈子名称(20字符内)
      /// 
      /// Locales: zh, en
      static func cycle_creat_title_tip(_: Void = ()) -> String {
        return NSLocalizedString("cycle_creat_title_tip", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入密码
      /// 
      /// Locales: zh, en
      static func setting_PWD(_: Void = ()) -> String {
        return NSLocalizedString("SETTING_PWD", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入或粘贴Keystore文本, 并提供对应的钱包地址密码。
      /// 
      /// Locales: zh, en
      static func keystore_SUB_CONTENT(_: Void = ()) -> String {
        return NSLocalizedString("KEYSTORE_SUB_CONTENT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入或选择转账地址
      /// 
      /// Locales: zh, en
      static func transfor_ADDRESS_HODER(_: Void = ()) -> String {
        return NSLocalizedString("TRANSFOR_ADDRESS_HODER", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入有误
      /// 
      /// Locales: zh, en
      static func common_INPUT_ERROR(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_INPUT_ERROR", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入标签名称
      /// 
      /// Locales: zh, en
      static func notice_addTags(_: Void = ()) -> String {
        return NSLocalizedString("notice_addTags", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入标签名称（最多24个字符）
      /// 
      /// Locales: zh, en
      static func notice_addTags_limit(_: Void = ()) -> String {
        return NSLocalizedString("notice_addTags_limit", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入用户名
      /// 
      /// Locales: zh, en
      static func built_input_username(_: Void = ()) -> String {
        return NSLocalizedString("built_input_username", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入简介(200字符内)
      /// 
      /// Locales: zh, en
      static func cycle_creat_des_tip(_: Void = ()) -> String {
        return NSLocalizedString("cycle_creat_des_tip", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 输入评论内容
      /// 
      /// Locales: zh, en
      static func notice_empty_comment(_: Void = ()) -> String {
        return NSLocalizedString("notice_empty_comment", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 还没有发布内容
      /// 
      /// Locales: zh, en
      static func cycle_no_content(_: Void = ()) -> String {
        return NSLocalizedString("cycle_no_content", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 还没有评论 快来评论获取PST
      /// 
      /// Locales: zh, en
      static func common_no_comment(_: Void = ()) -> String {
        return NSLocalizedString("common_no_comment", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 退出圈子
      /// 
      /// Locales: zh, en
      static func cycle_exit(_: Void = ()) -> String {
        return NSLocalizedString("cycle_exit", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 退出登录
      /// 
      /// Locales: zh, en
      static func quit_Account(_: Void = ()) -> String {
        return NSLocalizedString("QUIT_Account", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 邮箱
      /// 
      /// Locales: zh, en
      static func common_EMAIL(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_EMAIL", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 邮箱地址不正确
      /// 
      /// Locales: zh, en
      static func common_ERROR_EMAIL(_: Void = ()) -> String {
        return NSLocalizedString("COMMON_ERROR_EMAIL", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 重复密码
      /// 
      /// Locales: zh, en
      static func repeat_PWD(_: Void = ()) -> String {
        return NSLocalizedString("REPEAT_PWD", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 重新登入钱包需要你的Keystore或组记词,请保证你已备份钱包的Keystore或助记词。
      /// 
      /// Locales: zh, en
      static func quit_WALLET_CONTENT(_: Void = ()) -> String {
        return NSLocalizedString("QUIT_WALLET_CONTENT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 重试
      /// 
      /// Locales: zh, en
      static func comomon_try_again(_: Void = ()) -> String {
        return NSLocalizedString("comomon_try_again", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 金额不足
      /// 
      /// Locales: zh, en
      static func no_ENOUGH_FUNDS(_: Void = ()) -> String {
        return NSLocalizedString("NO_ENOUGH_FUNDS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 钱包创建成功
      /// 
      /// Locales: zh, en
      static func succeesd_CREATION_WALLET(_: Void = ()) -> String {
        return NSLocalizedString("SUCCEESD_CREATION_WALLET", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 钱包地址
      /// 
      /// Locales: zh, en
      static func wallet_ADDRESS(_: Void = ()) -> String {
        return NSLocalizedString("WALLET_ADDRESS", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 钱包导入成功
      /// 
      /// Locales: zh, en
      static func succeesd_WALLET_IMPORT(_: Void = ()) -> String {
        return NSLocalizedString("SUCCEESD_WALLET_IMPORT", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 锁定的PST将在1小时后解锁
      /// 
      /// Locales: zh, en
      static func lock_pst_warn(_: Void = ()) -> String {
        return NSLocalizedString("lock_pst_warn", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 闪光灯不可用
      /// 
      /// Locales: zh, en
      static func scan_ERROE3(_: Void = ()) -> String {
        return NSLocalizedString("SCAN_ERROE3", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 限定期
      /// 
      /// Locales: zh, en
      static func lock_pst_time(_: Void = ()) -> String {
        return NSLocalizedString("lock_pst_time", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 隐私协议
      /// 
      /// Locales: zh, en
      static func pwd_DEAL4(_: Void = ()) -> String {
        return NSLocalizedString("PWD_DEAL4", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 首页
      /// 
      /// Locales: zh, en
      static func common_home(_: Void = ()) -> String {
        return NSLocalizedString("common_home", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh translation: 高
      /// 
      /// Locales: zh, en
      static func set_level_high(_: Void = ()) -> String {
        return NSLocalizedString("set_level_high", tableName: "Language", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MineCycleCell.validate()
      try _CycleCell.validate()
      try _ImageTextCell.validate()
      try _PostCircleCell.validate()
      try _NocomentPage.validate()
      try _CommentCell.validate()
      try _EditToolBar.validate()
    }
    
    struct _CommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CommentCell
      
      let bundle = R.hostingBundle
      let identifier = "CommentCell"
      let name = "CommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "userLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userLogo' is used in nib 'CommentCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CommentToolBar: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommentToolBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CommentToolBar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentToolBar
      }
      
      fileprivate init() {}
    }
    
    struct _CycleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CycleCell
      
      let bundle = R.hostingBundle
      let identifier = "CycleViewCell"
      let name = "CycleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CycleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CycleCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "group_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group_bg' is used in nib 'CycleCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EditToolBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditToolBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EditToolBar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditToolBar
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "jianpan_xia", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'jianpan_xia' is used in nib 'EditToolBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xiangji", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xiangji' is used in nib 'EditToolBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xiangce", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xiangce' is used in nib 'EditToolBar', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ImageTextCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ImageTextCell
      
      let bundle = R.hostingBundle
      let identifier = "ImageTextCell"
      let name = "ImageTextCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ImageTextCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageTextCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mine_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mine_bg' is used in nib 'ImageTextCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zhuanfa_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zhuanfa_1' is used in nib 'ImageTextCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userLogo' is used in nib 'ImageTextCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dianzan_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dianzan_1' is used in nib 'ImageTextCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pinglun_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinglun_1' is used in nib 'ImageTextCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shouyi", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shouyi' is used in nib 'ImageTextCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MineCycleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MineCycleCell
      
      let bundle = R.hostingBundle
      let identifier = "MineCycleCell"
      let name = "MineCycleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MineCycleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineCycleCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "group_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group_bg' is used in nib 'MineCycleCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NocomentPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NocomentPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NocomentPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NocomentPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "zanwupinglun-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zanwupinglun-1' is used in nib 'NocomentPage', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PostCircleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostCircleCell
      
      let bundle = R.hostingBundle
      let identifier = "PostCircleCell"
      let name = "PostCircleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PostCircleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostCircleCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "weixuanze", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'weixuanze' is used in nib 'PostCircleCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xuanze", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xuanze' is used in nib 'PostCircleCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userLogo' is used in nib 'PostCircleCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TagCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TagCollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "TagCollectionCell"
      let name = "TagCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TagCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCollectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _WorthCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorthCell
      
      let bundle = R.hostingBundle
      let identifier = "WorthCell"
      let name = "WorthCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WorthCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorthCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try minePage.validate()
      try worthPage.validate()
      try builtWallet.validate()
      try cyclePage.validate()
      try noticeView.validate()
      try postPage.validate()
      try homePage.validate()
      try settingPage.validate()
      try launchScreen.validate()
    }
    
    struct builtWallet: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = GesturePopNav
      
      let backupPage = StoryboardViewControllerResource<BackupPage>(identifier: "BackupPage")
      let builtWallet = StoryboardViewControllerResource<GesturePopNav>(identifier: "BuiltWallet")
      let bundle = R.hostingBundle
      let checkHelpWord = StoryboardViewControllerResource<CheckHelpWord>(identifier: "CheckHelpWord")
      let helpWordPage = StoryboardViewControllerResource<HelpWordPage>(identifier: "HelpWordPage")
      let importPage = StoryboardViewControllerResource<ImportPage>(identifier: "ImportPage")
      let name = "BuiltWallet"
      let resigterDonePage = StoryboardViewControllerResource<ResigterDonePage>(identifier: "ResigterDonePage")
      
      func backupPage(_: Void = ()) -> BackupPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: backupPage)
      }
      
      func builtWallet(_: Void = ()) -> GesturePopNav? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: builtWallet)
      }
      
      func checkHelpWord(_: Void = ()) -> CheckHelpWord? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkHelpWord)
      }
      
      func helpWordPage(_: Void = ()) -> HelpWordPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpWordPage)
      }
      
      func importPage(_: Void = ()) -> ImportPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: importPage)
      }
      
      func resigterDonePage(_: Void = ()) -> ResigterDonePage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resigterDonePage)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_big") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_big' is used in storyboard 'BuiltWallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "guanbi_red") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'guanbi_red' is used in storyboard 'BuiltWallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow_left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_left' is used in storyboard 'BuiltWallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "denglubeijing") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'denglubeijing' is used in storyboard 'BuiltWallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chuangjianchengg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chuangjianchengg' is used in storyboard 'BuiltWallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "weak") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'weak' is used in storyboard 'BuiltWallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "choosen") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'choosen' is used in storyboard 'BuiltWallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dengluguanbi") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dengluguanbi' is used in storyboard 'BuiltWallet', but couldn't be loaded.") }
        if _R.storyboard.builtWallet().builtWallet() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'builtWallet' could not be loaded from storyboard 'BuiltWallet' as 'GesturePopNav'.") }
        if _R.storyboard.builtWallet().backupPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'backupPage' could not be loaded from storyboard 'BuiltWallet' as 'BackupPage'.") }
        if _R.storyboard.builtWallet().resigterDonePage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resigterDonePage' could not be loaded from storyboard 'BuiltWallet' as 'ResigterDonePage'.") }
        if _R.storyboard.builtWallet().checkHelpWord() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkHelpWord' could not be loaded from storyboard 'BuiltWallet' as 'CheckHelpWord'.") }
        if _R.storyboard.builtWallet().helpWordPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpWordPage' could not be loaded from storyboard 'BuiltWallet' as 'HelpWordPage'.") }
        if _R.storyboard.builtWallet().importPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'importPage' could not be loaded from storyboard 'BuiltWallet' as 'ImportPage'.") }
      }
      
      fileprivate init() {}
    }
    
    struct cyclePage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cycleCreatePage = StoryboardViewControllerResource<CycleCreatePage>(identifier: "CycleCreatePage")
      let cycleIndexPage = StoryboardViewControllerResource<CycleIndexPage>(identifier: "CycleIndexPage")
      let cyclePage = StoryboardViewControllerResource<CyclePage>(identifier: "CyclePage")
      let cyclePageNav = StoryboardViewControllerResource<GesturePopNav>(identifier: "CyclePageNav")
      let name = "CyclePage"
      
      func cycleCreatePage(_: Void = ()) -> CycleCreatePage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cycleCreatePage)
      }
      
      func cycleIndexPage(_: Void = ()) -> CycleIndexPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cycleIndexPage)
      }
      
      func cyclePage(_: Void = ()) -> CyclePage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cyclePage)
      }
      
      func cyclePageNav(_: Void = ()) -> GesturePopNav? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cyclePageNav)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "group_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group_bg' is used in storyboard 'CyclePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xiangji2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xiangji2' is used in storyboard 'CyclePage', but couldn't be loaded.") }
        if _R.storyboard.cyclePage().cyclePage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cyclePage' could not be loaded from storyboard 'CyclePage' as 'CyclePage'.") }
        if _R.storyboard.cyclePage().cyclePageNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cyclePageNav' could not be loaded from storyboard 'CyclePage' as 'GesturePopNav'.") }
        if _R.storyboard.cyclePage().cycleCreatePage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cycleCreatePage' could not be loaded from storyboard 'CyclePage' as 'CycleCreatePage'.") }
        if _R.storyboard.cyclePage().cycleIndexPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cycleIndexPage' could not be loaded from storyboard 'CyclePage' as 'CycleIndexPage'.") }
      }
      
      fileprivate init() {}
    }
    
    struct homePage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let articleDetail = StoryboardViewControllerResource<ArticleDetail>(identifier: "ArticleDetail")
      let bundle = R.hostingBundle
      let commentPage = StoryboardViewControllerResource<CommentPage>(identifier: "CommentPage")
      let homeFindPage = StoryboardViewControllerResource<HomeFindPage>(identifier: "HomeFindPage")
      let homeFollowPage = StoryboardViewControllerResource<HomeFollowPage>(identifier: "HomeFollowPage")
      let homePage = StoryboardViewControllerResource<HomePage>(identifier: "HomePage")
      let homePageNav = StoryboardViewControllerResource<GesturePopNav>(identifier: "HomePageNav")
      let name = "HomePage"
      
      func articleDetail(_: Void = ()) -> ArticleDetail? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articleDetail)
      }
      
      func commentPage(_: Void = ()) -> CommentPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentPage)
      }
      
      func homeFindPage(_: Void = ()) -> HomeFindPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeFindPage)
      }
      
      func homeFollowPage(_: Void = ()) -> HomeFollowPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeFollowPage)
      }
      
      func homePage(_: Void = ()) -> HomePage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homePage)
      }
      
      func homePageNav(_: Void = ()) -> GesturePopNav? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homePageNav)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "dianzan_dian") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dianzan_dian' is used in storyboard 'HomePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dazhuanfa") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dazhuanfa' is used in storyboard 'HomePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'HomePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dahuifu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dahuifu' is used in storyboard 'HomePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userLogo' is used in storyboard 'HomePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dadianzan") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dadianzan' is used in storyboard 'HomePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shouyi") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shouyi' is used in storyboard 'HomePage', but couldn't be loaded.") }
        if _R.storyboard.homePage().homePageNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homePageNav' could not be loaded from storyboard 'HomePage' as 'GesturePopNav'.") }
        if _R.storyboard.homePage().homeFollowPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeFollowPage' could not be loaded from storyboard 'HomePage' as 'HomeFollowPage'.") }
        if _R.storyboard.homePage().homeFindPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeFindPage' could not be loaded from storyboard 'HomePage' as 'HomeFindPage'.") }
        if _R.storyboard.homePage().commentPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentPage' could not be loaded from storyboard 'HomePage' as 'CommentPage'.") }
        if _R.storyboard.homePage().homePage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homePage' could not be loaded from storyboard 'HomePage' as 'HomePage'.") }
        if _R.storyboard.homePage().articleDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articleDetail' could not be loaded from storyboard 'HomePage' as 'ArticleDetail'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logoX") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoX' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainTabPage
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct minePage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mineCyclePage = StoryboardViewControllerResource<MineCyclePage>(identifier: "MineCyclePage")
      let minePageNav = StoryboardViewControllerResource<GesturePopNav>(identifier: "MinePageNav")
      let name = "MinePage"
      
      func mineCyclePage(_: Void = ()) -> MineCyclePage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mineCyclePage)
      }
      
      func minePageNav(_: Void = ()) -> GesturePopNav? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: minePageNav)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "userLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userLogo' is used in storyboard 'MinePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "update_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'update_icon' is used in storyboard 'MinePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shouyi") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shouyi' is used in storyboard 'MinePage', but couldn't be loaded.") }
        if _R.storyboard.minePage().mineCyclePage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mineCyclePage' could not be loaded from storyboard 'MinePage' as 'MineCyclePage'.") }
        if _R.storyboard.minePage().minePageNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'minePageNav' could not be loaded from storyboard 'MinePage' as 'GesturePopNav'.") }
      }
      
      fileprivate init() {}
    }
    
    struct noticeView: Rswift.StoryboardResourceType, Rswift.Validatable {
      let alertPassword = StoryboardViewControllerResource<AlertPassword>(identifier: "AlertPassword")
      let bundle = R.hostingBundle
      let name = "NoticeView"
      let noMoneyPage = StoryboardViewControllerResource<NoMoneyPage>(identifier: "NoMoneyPage")
      let noticeAddTags = StoryboardViewControllerResource<NoticeAddTags>(identifier: "NoticeAddTags")
      let noticeArticleInfo = StoryboardViewControllerResource<NoticeArticleInfo>(identifier: "NoticeArticleInfo")
      let noticeLogin = StoryboardViewControllerResource<NoticeLogin>(identifier: "NoticeLogin")
      let postPwdNotice = StoryboardViewControllerResource<PostPwdNotice>(identifier: "PostPwdNotice")
      
      func alertPassword(_: Void = ()) -> AlertPassword? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alertPassword)
      }
      
      func noMoneyPage(_: Void = ()) -> NoMoneyPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noMoneyPage)
      }
      
      func noticeAddTags(_: Void = ()) -> NoticeAddTags? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noticeAddTags)
      }
      
      func noticeArticleInfo(_: Void = ()) -> NoticeArticleInfo? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noticeArticleInfo)
      }
      
      func noticeLogin(_: Void = ()) -> NoticeLogin? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noticeLogin)
      }
      
      func postPwdNotice(_: Void = ()) -> PostPwdNotice? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postPwdNotice)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "guanbi_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'guanbi_2' is used in storyboard 'NoticeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "suoding") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'suoding' is used in storyboard 'NoticeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "guanbi_3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'guanbi_3' is used in storyboard 'NoticeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ok") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ok' is used in storyboard 'NoticeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "quexun_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'quexun_1' is used in storyboard 'NoticeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shezhi") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shezhi' is used in storyboard 'NoticeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "jingtan") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'jingtan' is used in storyboard 'NoticeView', but couldn't be loaded.") }
        if _R.storyboard.noticeView().alertPassword() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alertPassword' could not be loaded from storyboard 'NoticeView' as 'AlertPassword'.") }
        if _R.storyboard.noticeView().postPwdNotice() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postPwdNotice' could not be loaded from storyboard 'NoticeView' as 'PostPwdNotice'.") }
        if _R.storyboard.noticeView().noMoneyPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noMoneyPage' could not be loaded from storyboard 'NoticeView' as 'NoMoneyPage'.") }
        if _R.storyboard.noticeView().noticeArticleInfo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noticeArticleInfo' could not be loaded from storyboard 'NoticeView' as 'NoticeArticleInfo'.") }
        if _R.storyboard.noticeView().noticeLogin() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noticeLogin' could not be loaded from storyboard 'NoticeView' as 'NoticeLogin'.") }
        if _R.storyboard.noticeView().noticeAddTags() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noticeAddTags' could not be loaded from storyboard 'NoticeView' as 'NoticeAddTags'.") }
      }
      
      fileprivate init() {}
    }
    
    struct postPage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let agreementPage = StoryboardViewControllerResource<AgreementPage>(identifier: "AgreementPage")
      let bundle = R.hostingBundle
      let name = "PostPage"
      let postMain = StoryboardViewControllerResource<GesturePopNav>(identifier: "PostMain")
      let postStepOne = StoryboardViewControllerResource<Primas.PostStepOne>(identifier: "PostStepOne")
      let postStepTwo = StoryboardViewControllerResource<PostStepTwo>(identifier: "PostStepTwo")
      let postToCircle = StoryboardViewControllerResource<PostToCircle>(identifier: "PostToCircle")
      let tagsPage = StoryboardViewControllerResource<TagsPage>(identifier: "TagsPage")
      let tagsVcNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "tagsVcNav")
      
      func agreementPage(_: Void = ()) -> AgreementPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agreementPage)
      }
      
      func postMain(_: Void = ()) -> GesturePopNav? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postMain)
      }
      
      func postStepOne(_: Void = ()) -> Primas.PostStepOne? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postStepOne)
      }
      
      func postStepTwo(_: Void = ()) -> PostStepTwo? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postStepTwo)
      }
      
      func postToCircle(_: Void = ()) -> PostToCircle? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postToCircle)
      }
      
      func tagsPage(_: Void = ()) -> TagsPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tagsPage)
      }
      
      func tagsVcNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tagsVcNav)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "jianpan") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'jianpan' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xieyi_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xieyi_1' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xuanze") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xuanze' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xiangji") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xiangji' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xieyi3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xieyi3' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xieyi_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xieyi_2' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "jianpan_xia") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'jianpan_xia' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sanjiao") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sanjiao' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "weixuanze") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'weixuanze' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xiangce") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xiangce' is used in storyboard 'PostPage', but couldn't be loaded.") }
        if _R.storyboard.postPage().postMain() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postMain' could not be loaded from storyboard 'PostPage' as 'GesturePopNav'.") }
        if _R.storyboard.postPage().postStepOne() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postStepOne' could not be loaded from storyboard 'PostPage' as 'Primas.PostStepOne'.") }
        if _R.storyboard.postPage().tagsPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tagsPage' could not be loaded from storyboard 'PostPage' as 'TagsPage'.") }
        if _R.storyboard.postPage().postStepTwo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postStepTwo' could not be loaded from storyboard 'PostPage' as 'PostStepTwo'.") }
        if _R.storyboard.postPage().tagsVcNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tagsVcNav' could not be loaded from storyboard 'PostPage' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.postPage().postToCircle() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postToCircle' could not be loaded from storyboard 'PostPage' as 'PostToCircle'.") }
        if _R.storyboard.postPage().agreementPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agreementPage' could not be loaded from storyboard 'PostPage' as 'AgreementPage'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settingPage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let feedBackPage = StoryboardViewControllerResource<FeedBackPage>(identifier: "FeedBackPage")
      let helpPage = StoryboardViewControllerResource<HelpPage>(identifier: "HelpPage")
      let languageSet = StoryboardViewControllerResource<LanguageSet>(identifier: "LanguageSet")
      let name = "SettingPage"
      let settingPage = StoryboardViewControllerResource<SettingPage>(identifier: "SettingPage")
      
      func feedBackPage(_: Void = ()) -> FeedBackPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedBackPage)
      }
      
      func helpPage(_: Void = ()) -> HelpPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpPage)
      }
      
      func languageSet(_: Void = ()) -> LanguageSet? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageSet)
      }
      
      func settingPage(_: Void = ()) -> SettingPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingPage)
      }
      
      static func validate() throws {
        if _R.storyboard.settingPage().languageSet() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageSet' could not be loaded from storyboard 'SettingPage' as 'LanguageSet'.") }
        if _R.storyboard.settingPage().helpPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpPage' could not be loaded from storyboard 'SettingPage' as 'HelpPage'.") }
        if _R.storyboard.settingPage().settingPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingPage' could not be loaded from storyboard 'SettingPage' as 'SettingPage'.") }
        if _R.storyboard.settingPage().feedBackPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedBackPage' could not be loaded from storyboard 'SettingPage' as 'FeedBackPage'.") }
      }
      
      fileprivate init() {}
    }
    
    struct worthPage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorthPage"
      let worthPage = StoryboardViewControllerResource<WorthPage>(identifier: "WorthPage")
      let worthPageNav = StoryboardViewControllerResource<GesturePopNav>(identifier: "WorthPageNav")
      
      func worthPage(_: Void = ()) -> WorthPage? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: worthPage)
      }
      
      func worthPageNav(_: Void = ()) -> GesturePopNav? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: worthPageNav)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "laba") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'laba' is used in storyboard 'WorthPage', but couldn't be loaded.") }
        if _R.storyboard.worthPage().worthPageNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'worthPageNav' could not be loaded from storyboard 'WorthPage' as 'GesturePopNav'.") }
        if _R.storyboard.worthPage().worthPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'worthPage' could not be loaded from storyboard 'WorthPage' as 'WorthPage'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
